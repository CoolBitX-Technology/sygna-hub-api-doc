import _ from 'lodash';
import { Document, YAMLMap } from 'yaml';

export const toSnakeCase = (obj: object): object => {
  const obj2 = _.cloneDeep(obj);
  if (Array.isArray(obj2)) {
    return obj2.map(v => toSnakeCase(v));
  } else if (obj2 != null && obj2.constructor === Object) {
    return Object.keys(obj2).reduce(
      (result, key) => ({
        ...result,
        [_.snakeCase(key)]: toSnakeCase(obj2[key]),
      }),
      {},
    );
  }
  return obj2;
};

export const genConfigYamlString = (config: object) => {
  const doc = new Document(config);

  const comments: Record<string, Record<string, string>> = {
    settings: {
      // Indent the text in this style on purpose to generate the styled comments.
      webhook_url: ` If this URL is provided, events notifications will be sent to the URL.
 You can perform actions based on the received notifications.
 Please check webhook events documentation for all available events.
 https://github.com/CoolBitX-Technology/sygna-hub-api-doc/tree/master?tab=readme-ov-file#webhook-events`,
      jwt_secret: ' The signing key for JWT token. Keep this value secure and confidential.',
      access_token_expire_sec: ' JWT token will expire after {this value} seconds.',
      data_encryption_key: ` A new encryption key generated by VASP to encrypt service credentials in the database, should be a 32 or 64-character long HEX string
 Please double check if you entered an invalid HEX string for your "data_encryption_key" (e.g., entering ghijk...).
 Can NOT be set with the “private key” (generated by VASP during Sygna Hub account registration)`,
      license_key: ' license key = Sygna Hub API key = "Your API Key" (retrieved when Sygna Hub account registration is completed)',
      admin_account: ` email address and password for the first user in Hub server
 You can use this account to login.`,
      admin_password: ` Password must be at least 6 characters long, include 1 number, 1 uppercase letter, and 1 special character.
 No consecutive identical characters allowed. 
 Special character: ~!@#$%^&*()_+\`-={}|[]\\:"<>?,./`,
      concurrency: ` Limit the maximum concurrent requests processed by Sygna Hub backend server.
 Use a positive value to enable it; set 0 or negative value to disable.`,
      work_type: ` The parameter "work_type" refers to the function of the container
 if the container is used to address API-related service, please define the value of its work_type as "api"
 if the container is used to address cronjob-related service, please define the value of its work_type as "cronjob"
 if the container is used to address API-related and cronjob-related service at the same time, there is no need to define the value of its work_type. Please note that the default value of work_type is set as ""`,
      transaction_concurrency: ` Limit the maximum concurrent "POST /transactions" requests processed by Sygna Hub backend server.
 This value must be equal to or lower than the overall concurrency limit.
 Setting it too high may reduce capacity for other API requests.`
    },
    db: {
      driver: ` Database configuration
 Supported options: postgres | mysql`,
      port: ` Default port 
 postgres: 5432
 mysql: 3306`
    },
    server: {
      enable_rotate_log: 'Old log will be automatically compressed if this option is set to true.',
      enable_cors: 'Allow web frontend hosted in different domain to connect to Sygna Hub backend',
      allow_origins: ` Require "enable_cors" to be true and specify a list of allowed origins for connecting to the Sygna Hub backend.
 https (SSL/TLS) is required`,
      callback_host: ` This URL endpoint is used by the Sygna Bridge server to send the request to you, e.g., "permission request", "permission".
 If updated, the VASP must restart the container to refresh the URL on the Sygna Bridge server.
 https (SSL/TLS) is required.`
    },
    google_login: {
      comment: ` Only required if you want to enable Google login.
 Please refer to: https://developers.google.com/identity/protocols/oauth2`
    },
    log_file: {
      file_name: ' Path for log file, you can set this value to relative or absolute path.',
      max_size: ' Max size for single log file in MB. If you set to zero, default value is 100 MB.',
      max_backups: ' Max number of old log files to retain. If you set to zero, old logs will never be deleted.',
      max_age: ' Max number of days to retain log files. If set to zero, old logs will never be deleted.'
    },
    email_service: {
      host: ' Hostname and port of your email service.',
      account: ' Please enter your email service account credentials (e.g., AWS IAM user name and password).',
      display_name: ' The name of the sender, which would be useless if you enable TLS.',
      from_email: ' Email address of your sender.',
      encryption_mode: 'Supported options: "NONE" | "SSL/TLS" | "STARTTLS"'
    },
    frontend: {
      url: ` URL of Hub frontend, used in email protocol and private wallet ownership. Allows the counterparty to access transaction details through the URL.
 https (SSL/TLS) is required.`
    },
    trisa_server: {
      url: ` URL for TRISA gateway server.
 For example, if you are using docker-compose to setup services, this value should be http://trisa:8081.
 This option can be removed if you are not using TRISA.`,
      host: 'Host and port to receive grpc message from TRISA network, default is port 443.',
      restful_port: ` Hub server send request to trisa gateway with restful api request.
 This option change restful server listen port.
 If you change this port, url above should match.
 For example: restful_port: 8888 -> url: "http://trisa:8888
      `
    },
    shyft_server: {
      rpc_url: ` json rpc url of shyft relay node.
 If you're using docker-compose to setup shyft relay node, this value should not be changed.
 If you are using external provider, please make sure you are using websocket endpoint.
 http endpoint will not work properly.`
    }
  };
  
  
  for (const sectionKey in comments) {
    const sectionNode = doc.get(sectionKey) as YAMLMap;
    for (const key in comments[sectionKey]) {
      if (key === 'comment') {
        sectionNode.commentBefore = comments[sectionKey].comment;
      } else {
        const keyNode = sectionNode.get(key, true);
        if (keyNode) {
          keyNode.commentBefore = comments[sectionKey][key];
        }
      }      
    }
  }
  
  return doc.toString();
}
