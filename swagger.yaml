basePath: /v1
definitions:
  errors.SystemError:
    properties:
      code:
        type: string
      extra_data:
        type: object
      help:
        type: string
      message:
        type: string
      stack:
        type: object
    type: object
  model.Addr:
    properties:
      address:
        type: string
      extra_info:
        type: object
    type: object
  model.Currency:
    properties:
      addr_extra_info:
        items:
          type: string
        type: array
      created_at:
        type: string
      currency_id:
        type: string
      currency_name:
        type: string
      currency_symbol:
        type: string
      is_active:
        type: boolean
      is_kyt_supported:
        type: boolean
      kyt_providers:
        items:
          type: string
        type: array
      platform:
        $ref: '#/definitions/model.Platform'
      updated_at:
        type: string
    type: object
  model.Login:
    properties:
      account:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      last_login:
        type: string
      last_password_change:
        type: string
      login_type:
        type: string
      updated_at:
        type: string
    type: object
  model.Platform:
    properties:
      id:
        type: string
      name:
        type: string
      symbol:
        type: string
      token_address:
        type: string
    type: object
  model.PostEmailProtocolDepositParam:
    properties:
      beneficiary:
        properties:
          addrs:
            items:
              $ref: '#/definitions/model.Addr'
            type: array
          assets:
            items:
              type: string
            type: array
        type: object
      currency_id:
        type: string
      customer_id:
        type: string
      originator:
        properties:
          addrs:
            items:
              $ref: '#/definitions/model.Addr'
            type: array
        type: object
      value:
        type: string
    required:
    - currency_id
    - customer_id
    - originator
    - value
    type: object
  model.PostTransactionParam:
    properties:
      beneficiary:
        properties:
          addrs:
            items:
              $ref: '#/definitions/model.Addr'
            type: array
          customer_type:
            description: |-
              Customer Type
              * 0 - NaturalPerson
              * 1 - LegalPerson
            type: integer
          private_info:
            $ref: '#/definitions/types.BeneficiaryPrivateInfo'
          vasp_code:
            type: string
        type: object
      currency_id:
        description: Choose target currency identifier from GET /currencies
        type: string
      customer_id:
        description: Choose target identifier from GET /customers
        type: string
      originator:
        description: Choose asset identifiers from GET /assets/:customerID or input
          addresses belong to above customer identifier
        properties:
          addrs:
            items:
              $ref: '#/definitions/model.Addr'
            type: array
          assets:
            items:
              type: string
            type: array
        type: object
      protocol:
        enum:
        - "null"
        - SYGNA_BRIDGE
        - SYGNA_EMAIL_PROTOCOL
        - TRISA
        type: string
        x-nullable: true
      protocol_extra_info:
        type: object
      value:
        description: The value of the currency requested to transfer.
        type: string
    required:
    - currency_id
    - customer_id
    - originator
    - value
    type: object
  model.Service:
    properties:
      created_at:
        type: string
      credential:
        description: this field is plain text
        type: object
      end_time:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      provider:
        type: string
      settings:
        type: object
      start_time:
        type: string
      status:
        type: string
      type:
        type: string
      updated_at:
        type: string
      vasp_code:
        type: string
    type: object
  model.SupportedService:
    properties:
      created_at:
        type: string
      credential:
        type: object
      editable:
        type: boolean
      id:
        type: string
      is_active:
        type: boolean
      provider:
        type: string
      settings:
        type: object
      type:
        type: string
      updated_at:
        type: string
    type: object
  model.User:
    properties:
      created_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      logins:
        items:
          $ref: '#/definitions/model.Login'
        type: array
      role_id:
        type: integer
      updated_at:
        type: string
    type: object
  schema.Address:
    properties:
      address_line:
        items:
          type: string
        type: array
      address_type:
        type: string
      building_name:
        type: string
      building_number:
        type: string
      country:
        type: string
      country_sub_division:
        type: string
      department:
        type: string
      district_name:
        type: string
      floor:
        type: string
      post_box:
        type: string
      post_code:
        type: string
      room:
        type: string
      street_name:
        type: string
      sub_department:
        type: string
      town_location_name:
        type: string
      town_name:
        type: string
    type: object
  schema.Asset:
    properties:
      address:
        type: string
      created_at:
        type: string
      currency_id:
        type: string
      extra_info:
        type: object
      id:
        type: string
      labels:
        items:
          type: string
        type: array
      last_screened:
        type: string
      risk_score:
        type: string
      risk_score_provider:
        type: string
      updated_at:
        type: string
      value:
        type: string
      value_usd:
        type: string
    type: object
  schema.ChangePasswordParam:
    properties:
      new_password:
        description: |-
          new password must be follow below rules:
          at least 6 letters
          at least 1 number
          at least 1 upper case
          at least 1 special character
        type: string
      old_password:
        type: string
    required:
    - new_password
    - old_password
    type: object
  schema.DateAndPlaceOfBirth:
    properties:
      date_of_birth:
        type: string
      place_of_birth:
        type: string
    type: object
  schema.DeleteUsersParam:
    properties:
      id:
        description: specific user identifier
        type: string
    required:
    - id
    type: object
  schema.GetCustomerResp:
    properties:
      address:
        $ref: '#/definitions/schema.Address'
      assets:
        items:
          $ref: '#/definitions/schema.Asset'
        type: array
      avg_risk_score:
        type: string
      birth:
        $ref: '#/definitions/schema.DateAndPlaceOfBirth'
      country:
        type: string
      created_at:
        type: string
      customer_id:
        type: string
      customer_type:
        type: integer
      id:
        type: string
      is_active:
        type: boolean
      labels:
        items:
          type: string
        type: array
      last_screened:
        type: string
      max_risk_score:
        type: string
      name:
        type: string
      national:
        $ref: '#/definitions/schema.NationalIdentification'
      risk_score_provider:
        type: string
      updated_at:
        type: string
    type: object
  schema.GetCustomersResp:
    properties:
      avg_risk_score:
        type: string
      created_at:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      labels:
        items:
          type: string
        type: array
      last_screened:
        type: string
      max_risk_score:
        type: string
      name:
        type: string
      risk_score_provider:
        type: string
      updated_at:
        type: string
    type: object
  schema.GetTransactionResp:
    properties:
      created_at:
        type: string
      currency_id:
        type: string
      customer:
        $ref: '#/definitions/schema.GetCustomerResp'
      direction:
        type: integer
      high_risk:
        description: |-
          if your KYT service is Elliptic, high_risk would be true when maximum risk score of address in this transaction is greater than score which is mantain in /services ;
          if your KYT service is Chainalysis, high_risk would be true when one of addresses is high in result which scanned by Chainalysis
          if sanction_score is greater than 0, high_risk would be true
        type: boolean
      id:
        type: string
      max_risk_score:
        type: string
      protocol:
        description: The default is SYGNA_BRIDGE
        type: string
      risk_score_provider:
        type: string
      sanction_report_link:
        description: sanction_report_link would be valuable if sanction screening
          service is enabled, it provids a report to download
        type: string
      sanction_score:
        description: sanction_score would be valuable if sanction screening service
          is enabled
        type: integer
      status:
        type: integer
      status_text:
        type: string
      transaction_asset:
        $ref: '#/definitions/schema.TransactionAsset'
      tx_id:
        type: string
      updated_at:
        type: string
      value:
        type: string
      value_usd:
        type: string
    required:
    - created_at
    - currency_id
    - direction
    - id
    - protocol
    - status
    - status_text
    - updated_at
    - value
    type: object
  schema.GetTransactionsResp:
    properties:
      address:
        type: string
      created_at:
        type: string
      currency_id:
        type: string
      currency_name:
        type: string
      currency_symbol:
        type: string
      direction:
        type: integer
      id:
        type: string
      labels:
        items:
          type: string
        type: array
      last_screened:
        type: string
      name:
        type: string
      protocol:
        type: string
      risk_score:
        type: string
      risk_score_provider:
        type: string
      sanction_score:
        type: integer
      status:
        type: integer
      status_text:
        type: string
      tx_id:
        type: string
      value:
        type: string
      value_usd:
        type: string
    type: object
  schema.NationalIdentification:
    properties:
      country_of_issue:
        type: string
      national_identifier:
        type: string
      national_identifier_type:
        type: string
      registration_authority:
        type: string
    type: object
  schema.PagingResult:
    properties:
      has_next:
        type: boolean
      limit:
        type: integer
      next_offset:
        description: next_offset is valuable when has_next is true
        type: integer
      offset:
        type: integer
      total:
        type: integer
    required:
    - has_next
    - limit
    - offset
    - total
    type: object
  schema.PatchAssetParam:
    properties:
      address:
        type: string
      currency_id:
        type: string
      extra_info: {}
      id:
        format: uuid
        type: string
      value:
        type: string
    required:
    - id
    type: object
  schema.PatchPermissionParam:
    properties:
      expire_date:
        description: ISO8601 date-time string.To set an expiry date of your transfer
          request. Bridge will stop relaying transfer requests once the transfer expires.
        format: date-time
        type: string
      id:
        description: Target transaction identifier which status is Pending On Beneficiary
        format: uuid
        type: string
      permission_status:
        description: Status of the transfer permission, 0 for accept, 1 for reject
        enum:
        - 0
        - 1
        type: integer
      reject_code:
        description: Only required when the permission_status is REJECTED, reply with
          [BVRC](ref:beneficiary-vasp-rejected-code).
        enum:
        - BVRC001
        - BVRC002
        - BVRC003
        - BVRC004
        - BVRC005
        - BVRC006
        - BVRC007
        - BVRC999
        type: string
      reject_message:
        description: Only required when the permission_status is REJECTED and reject_code
          is 'BVRC999', reply with [BVRC](ref:beneficiary-vasp-rejected-code).
        type: string
    required:
    - id
    - permission_status
    type: object
  schema.PatchTxIdParam:
    properties:
      id:
        description: Target transaction identifier which status is Pending On Originator
        format: uuid
        type: string
      txid:
        description: Transaction identifier on blockchain
        type: string
    required:
    - id
    - txid
    type: object
  schema.PatchUsersParam:
    properties:
      id:
        description: specific user identifier
        type: string
      is_active:
        type: boolean
    required:
    - id
    - is_active
    type: object
  schema.PostAssetParam:
    properties:
      address:
        type: string
      currency_id:
        type: string
      extra_info:
        type: object
      value:
        type: string
    required:
    - address
    - currency_id
    - value
    type: object
  schema.PostCustomersParam:
    properties:
      address:
        $ref: '#/definitions/schema.Address'
      assets:
        items:
          $ref: '#/definitions/schema.PostAssetParam'
        type: array
      birth:
        $ref: '#/definitions/schema.DateAndPlaceOfBirth'
      country:
        type: string
      customer_id:
        type: string
      customer_type:
        description: |-
          Customer Type
          * 0 - NaturalPerson
          * 1 - LegalPerson
        enum:
        - 0
        - 1
        type: integer
      name:
        type: string
      national:
        $ref: '#/definitions/schema.NationalIdentification'
    required:
    - assets
    - country
    - customer_type
    - name
    type: object
  schema.PostEmailProtocolPermissionParam:
    properties:
      customer:
        $ref: '#/definitions/schema.PostCustomersParam'
        description: cutomer is required if permission_status is ACCEPTED
      expire_date:
        description: ISO8601 date-time string.To set an expiry date of your transfer
          request. Bridge will stop relaying transfer requests once the transfer expires.
        format: date-time
        type: string
      id:
        description: Target transaction identifier which status is Pending On Beneficiary
        format: uuid
        type: string
      permission_status:
        description: Status of the transfer permission, 0 for accept, 1 for reject
        enum:
        - 0
        - 1
        type: integer
      reject_code:
        description: Only required when the permission_status is REJECTED, reply with
          [BVRC](ref:beneficiary-vasp-rejected-code).
        enum:
        - BVRC001
        - BVRC002
        - BVRC003
        - BVRC004
        - BVRC005
        - BVRC006
        - BVRC007
        - BVRC999
        type: string
      reject_message:
        description: Only required when the permission_status is REJECTED and reject_code
          is 'BVRC999', reply with [BVRC](ref:beneficiary-vasp-rejected-code).
        type: string
    required:
    - id
    - permission_status
    type: object
  schema.PostOauthParam:
    properties:
      account:
        type: string
      credential:
        type: string
      login_type:
        enum:
        - password
        - google
        type: string
    required:
    - account
    - credential
    type: object
  schema.PostServicesParam:
    properties:
      credential:
        type: object
      provider:
        enum:
        - Elliptic
        - Chainalysis
        - ComplyAdvantage
        - Merkle Science
        - TRISA
        - Sygna Bridge
        type: string
      type:
        enum:
        - Blockchain Analytics
        - Sanction Screening
        type: string
    required:
    - credential
    - provider
    - type
    type: object
  schema.PostUsersLinkParam:
    properties:
      account:
        description: your account of third party service
        type: string
      credential:
        description: your credential of third party service and it would be used to
          validate if your account is valid
        type: string
      login_type:
        description: |-
          third party service name
          only google is supported now
        type: string
    required:
    - account
    - login_type
    type: object
  schema.PostUsersParam:
    properties:
      account:
        description: account should be valid email address
        type: string
      email_pw_to_user:
        description: email_pw_to_user is optional and its default value is true.
        type: boolean
      password:
        description: |-
          password is optional and it is generated if password is empty.
          password must be follow below rules:
          at least 6 letters
          at least 1 number
          at least 1 upper case
          at least 1 special character
        type: string
      role_id:
        description: |-
          role_id
          * 0 - admin
          * 1 - member
          role_id is optional and its default value is 1(member).
          notice: admin could not be created if there is admin in VASP.
        type: integer
    required:
    - account
    type: object
  schema.PostVendorsTestParam:
    properties:
      credential:
        description: |-
          credential
          * provider:Elliptic,type:Blockchain Analytics - api_key and secret are required
          * provider:Chainalysis V1,type:Blockchain Analytics - api_key is required
          * provider:Chainalysis V2,type:Blockchain Analytics - api_key is required
          * provider:Merkle Science,type:Blockchain Analytics - x-api-key is required
          * provider:ComplyAdvantage,type:Sanction Screening - api_key is required
          * provider:Sygna Bridge,type:Travel Rule - private_key is required
          * provider:TRISA,type:Travel Rule - p12,password,registration_id,registration_data are required
        type: object
      provider:
        enum:
        - Sygna Bridge
        - Elliptic
        - Chainalysis
        - ComplyAdvantage
        - Merkle Science
        - TRISA
        type: string
      type:
        enum:
        - Travel Rule
        - Blockchain Analytics
        - Sanction Screening
        type: string
    required:
    - credential
    - provider
    - type
    type: object
  schema.PostVendorsTestResp:
    properties:
      error_message:
        type: string
      fields:
        items:
          type: string
        type: array
      provider:
        type: string
      status_code:
        type: integer
      type:
        type: string
    required:
    - provider
    - status_code
    - type
    type: object
  schema.PostWalletAddressFilterParam:
    properties:
      addrs:
        description: addresses which are searching information by Sygna Bridge
        items:
          type: string
        type: array
      currency_id:
        description: choose target currency identifier from GET /currencies
        type: string
    required:
    - addrs
    - currency_id
    type: object
  schema.PostWalletAddressFilterResp:
    properties:
      address:
        type: string
      currency_id:
        type: string
      error:
        $ref: '#/definitions/errors.SystemError'
      extra_data:
        additionalProperties: true
        type: object
      is_vasp:
        description: the address if is belong to a VASP
        type: boolean
      success:
        description: there is only error attribute if success is false;otherwise,
          there are another attributes
        type: boolean
      type:
        description: the address is belong to which type
        enum:
        - SYGNA_BRIDGE
        - SYGNA_EMAIL_PROTOCOL
        - UNKNOWN
        - FAILED
        type: string
    type: object
  schema.PutCustomersParam:
    properties:
      address:
        $ref: '#/definitions/schema.Address'
      assets:
        items:
          $ref: '#/definitions/schema.PatchAssetParam'
        type: array
      birth:
        $ref: '#/definitions/schema.DateAndPlaceOfBirth'
      country:
        type: string
      customer_id:
        type: string
      customer_type:
        description: |-
          Customer Type
          * 0 - NaturalPerson
          * 1 - LegalPerson
        enum:
        - 0
        - 1
        type: integer
      id:
        format: uuid
        type: string
      name:
        type: string
      national:
        $ref: '#/definitions/schema.NationalIdentification'
    required:
    - country
    - customer_type
    - id
    - name
    type: object
  schema.PutServicesParam:
    properties:
      credential:
        type: object
      is_active:
        type: boolean
      provider:
        enum:
        - Elliptic
        - Chainalysis
        - ComplyAdvantage
        - Merkle Science
        - TRISA
        - Sygna Bridge
        type: string
      settings:
        type: object
      type:
        enum:
        - Blockchain Analytics
        - Sanction Screening
        type: string
    required:
    - credential
    - is_active
    - provider
    - type
    type: object
  schema.Resp:
    properties:
      data:
        type: object
    type: object
  schema.RespWithMutation:
    properties:
      data:
        items:
          properties:
            error:
              $ref: '#/definitions/errors.SystemError'
            id:
              format: uuid
              type: string
            success:
              type: boolean
          required:
          - success
          type: object
        type: array
    required:
    - data
    type: object
  schema.RespWithPaging:
    properties:
      data:
        type: object
      paging:
        $ref: '#/definitions/schema.PagingResult'
    type: object
  schema.RespWithStatus:
    properties:
      data:
        properties:
          success:
            type: boolean
        required:
        - success
        type: object
    required:
    - data
    type: object
  schema.RespWithStatusAndMessage:
    properties:
      data:
        properties:
          message:
            example: something
            type: string
          success:
            type: boolean
        required:
        - message
        - success
        type: object
    required:
    - data
    type: object
  schema.TransactionAsset:
    properties:
      address:
        type: string
      created_at:
        type: string
      extra_info:
        type: object
      id:
        type: string
      labels:
        items:
          type: string
        type: array
      last_screened:
        type: string
      risk_score:
        type: string
      risk_score_provider:
        type: string
    required:
    - id
    type: object
  types.BeneficiaryPrivateInfo:
    properties:
      legal_person_name:
        type: string
      primary_identifier:
        description: |-
          primary_identifier is required and secondary_identifier is optional if customer_type is NaturalPerson ;
          legal_person_name is required  if customer_type is LegalPerson
        type: string
      secondary_identifier:
        type: string
    type: object
info:
  contact:
    email: services@sygna.io
    name: Sygna Support
    url: https://www.sygna.io/
  description: Sygna Hub API
  title: Sygna HUB
  version: 1.0.0
paths:
  /currencies:
    get:
      operationId: GetCurrencies
      parameters:
      - collectionFormat: multi
        description: filter currencies by currency identifier
        in: query
        items:
          type: string
        name: currency_id
        type: array
      - collectionFormat: multi
        description: filter currencies data by currency symbol
        in: query
        items:
          type: string
        name: currency_symbol
        type: array
      - collectionFormat: multi
        description: filter currencies data by currency name
        in: query
        items:
          type: string
        name: currency_name
        type: array
      - collectionFormat: multi
        description: filter currencies data by kyt providers
        in: query
        items:
          type: string
        name: kyt_provider
        type: array
      - collectionFormat: multi
        description: filter currencies by if status is activated
        in: query
        items:
          type: boolean
        name: is_active
        type: array
      - collectionFormat: multi
        description: filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: created_at
        type: array
      - description: A URL parameter that specifies the maximum number of records
          to return. This can be any positive integer between 1 and 1000 inclusive.
          If not specified, the default is 20.
        in: query
        name: limit
        type: integer
      - description: Specifies an offset that allows you to retrieve the next batch
          of records.Any positive integer.If not specified, the default is 0.
        in: query
        name: offset
        type: integer
      - collectionFormat: multi
        description: Specifies sequences to sort data (ie.orderby=id:desc)
        in: query
        items:
          type: string
        name: orderby
        type: array
      - collectionFormat: multi
        description: filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: updated_at
        type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schema.RespWithPaging'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Currency'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: get supported currencies
      tags:
      - currencies
  /customers:
    get:
      parameters:
      - collectionFormat: multi
        description: filter customers by customer identifier
        in: query
        items:
          type: string
        name: id
        type: array
      - collectionFormat: multi
        description: filter customers by customer name
        in: query
        items:
          type: string
        name: name
        type: array
      - collectionFormat: multi
        description: filter customers by if status is activated
        in: query
        items:
          type: boolean
        name: is_active
        type: array
      - collectionFormat: multi
        description: filter customers by risk score provider
        in: query
        items:
          enum:
          - Elliptic
          - Chainalysis V1
          - Chainalysis V2
          - Merkle Science
          type: string
        name: risk_score_provider
        type: array
      - collectionFormat: multi
        description: A URL parameter that specifies the range of max risk score. This
          format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis V1:low,high).
        in: query
        items:
          type: string
        name: max_risk_score
        type: array
      - collectionFormat: multi
        description: A URL parameter that specifies the range of average risk score.
          This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis
          V1:low,high).
        in: query
        items:
          type: string
        name: avg_risk_score
        type: array
      - collectionFormat: multi
        description: filter customers by labels from KYT service searched
        in: query
        items:
          type: string
        name: label
        type: array
      - collectionFormat: multi
        description: filter customers by a range of last screened date(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: last_screened
        type: array
      - collectionFormat: multi
        description: filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: created_at
        type: array
      - description: A URL parameter that specifies the maximum number of records
          to return. This can be any positive integer between 1 and 1000 inclusive.
          If not specified, the default is 20.
        in: query
        name: limit
        type: integer
      - description: Specifies an offset that allows you to retrieve the next batch
          of records.Any positive integer.If not specified, the default is 0.
        in: query
        name: offset
        type: integer
      - collectionFormat: multi
        description: Specifies sequences to sort data (ie.orderby=id:desc)
        in: query
        items:
          type: string
        name: orderby
        type: array
      - collectionFormat: multi
        description: filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: updated_at
        type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schema.RespWithPaging'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schema.GetCustomersResp'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: get customers
      tags:
      - customers
    post:
      parameters:
      - description: post /customers params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/schema.PostCustomersParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithMutation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: create customers
      tags:
      - customers
    put:
      parameters:
      - description: put /customers params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/schema.PutCustomersParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithMutation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: update customers
      tags:
      - customers
  /customers/{id}:
    get:
      parameters:
      - description: customer identifier
        in: path
        name: id
        required: true
        type: string
      - collectionFormat: multi
        description: filter asset by ids in current customer
        in: query
        items:
          type: string
        name: asset_id
        type: array
      - collectionFormat: multi
        description: filter asset by currency id in current customer
        in: query
        items:
          type: string
        name: asset_currency_id
        type: array
      - collectionFormat: multi
        description: filter asset by risk score in current customer
        in: query
        items:
          type: string
        name: asset_risk_score
        type: array
      - collectionFormat: multi
        description: filter asset by address in current customer
        in: query
        items:
          type: string
        name: asset_address
        type: array
      - collectionFormat: multi
        description: filter asset by label in current customer
        in: query
        items:
          type: string
        name: asset_label
        type: array
      - collectionFormat: multi
        description: filter asset by value in current customer
        in: query
        items:
          type: string
        name: asset_value
        type: array
      - collectionFormat: multi
        description: filter asset by last screen time in current customer
        in: query
        items:
          type: string
        name: asset_last_screened
        type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schema.Resp'
            - properties:
                data:
                  $ref: '#/definitions/schema.GetCustomersResp'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: get specific customer detail
      tags:
      - customers
  /oauth2:
    delete:
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: delete oauth token from database
      tags:
      - oauth2
    post:
      parameters:
      - description: post /oauth2 param
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.PostOauthParam'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithStatus'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      summary: get oauth token
      tags:
      - oauth2
  /services:
    get:
      description: only allow admin to use this method
      parameters:
      - collectionFormat: multi
        description: filter services by service identifier
        in: query
        items:
          type: string
        name: id
        type: array
      - collectionFormat: multi
        description: filter services by provider
        in: query
        items:
          enum:
          - Sygna Bridge
          - Elliptic
          - Chainalysis V1
          - Chainalysis V2
          - ComplyAdvantage
          - Merkle Science
          - TRISA
          type: string
        name: provider
        type: array
      - collectionFormat: multi
        description: filter services by type
        in: query
        items:
          enum:
          - Travel Rule
          - Blockchain Analytics
          - Sanction Screening
          type: string
        name: type
        type: array
      - collectionFormat: multi
        description: filter services by if status is activated
        in: query
        items:
          type: boolean
        name: is_active
        type: array
      - collectionFormat: multi
        description: filter services by status
        in: query
        items:
          enum:
          - activated
          - deactivated
          - disabled
          - upcoming
          - expired
          type: string
        name: status
        type: array
      - collectionFormat: multi
        description: filter services by a range of start time(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: start_time
        type: array
      - collectionFormat: multi
        description: filter services by a range of end time(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: query
        type: array
      - collectionFormat: multi
        description: filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: created_at
        type: array
      - description: A URL parameter that specifies the maximum number of records
          to return. This can be any positive integer between 1 and 1000 inclusive.
          If not specified, the default is 20.
        in: query
        name: limit
        type: integer
      - description: Specifies an offset that allows you to retrieve the next batch
          of records.Any positive integer.If not specified, the default is 0.
        in: query
        name: offset
        type: integer
      - collectionFormat: multi
        description: Specifies sequences to sort data (ie.orderby=id:desc)
        in: query
        items:
          type: string
        name: orderby
        type: array
      - collectionFormat: multi
        description: filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: updated_at
        type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schema.RespWithPaging'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.Service'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: get services
      tags:
      - services
    post:
      description: |-
        only allow admin to use this method
        use GET /services/supported to understand which credential is required by provider
      parameters:
      - description: post /services params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/schema.PostServicesParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithMutation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: create services
      tags:
      - services
    put:
      description: |-
        only allow admin to use this method
        use GET /services/supported to understand which credential is required by provider
      parameters:
      - description: put /services params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/schema.PutServicesParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithMutation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: update services
      tags:
      - services
  /services/supported:
    get:
      description: only allow admin to use this method
      parameters:
      - collectionFormat: multi
        description: filter services by service identifier
        in: query
        items:
          type: string
        name: id
        type: array
      - collectionFormat: multi
        description: filter services by provider
        in: query
        items:
          enum:
          - Sygna Bridge
          - Elliptic
          - Chainalysis V1
          - Chainalysis V2
          - ComplyAdvantage
          - Merkle Science
          - TRISA
          type: string
        name: provider
        type: array
      - collectionFormat: multi
        description: filter services by type
        in: query
        items:
          enum:
          - Travel Rule
          - Blockchain Analytics
          - Sanction Screening
          type: string
        name: type
        type: array
      - collectionFormat: multi
        description: filter services by if status is activated
        in: query
        items:
          type: boolean
        name: is_active
        type: array
      - collectionFormat: multi
        description: filter services by editable
        in: query
        items:
          type: boolean
        name: editable
        type: array
      - collectionFormat: multi
        description: filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: created_at
        type: array
      - description: A URL parameter that specifies the maximum number of records
          to return. This can be any positive integer between 1 and 1000 inclusive.
          If not specified, the default is 20.
        in: query
        name: limit
        type: integer
      - description: Specifies an offset that allows you to retrieve the next batch
          of records.Any positive integer.If not specified, the default is 0.
        in: query
        name: offset
        type: integer
      - collectionFormat: multi
        description: Specifies sequences to sort data (ie.orderby=id:desc)
        in: query
        items:
          type: string
        name: orderby
        type: array
      - collectionFormat: multi
        description: filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: updated_at
        type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schema.RespWithPaging'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.SupportedService'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: get supported services and its config
      tags:
      - services
  /transactions:
    get:
      parameters:
      - collectionFormat: multi
        description: filter transactions by transaction identifier
        in: query
        items:
          type: string
        name: id
        type: array
      - collectionFormat: multi
        description: filter transactions by customer name
        in: query
        items:
          type: string
        name: name
        type: array
      - collectionFormat: multi
        description: filter transactions by transaction address
        in: query
        items:
          type: string
        name: address
        type: array
      - collectionFormat: multi
        description: filter transactions by transaction id on blockchain
        in: query
        items:
          type: string
        name: tx_id
        type: array
      - collectionFormat: multi
        description: filter transactions by transaction currency id
        in: query
        items:
          type: string
        name: currency_id
        type: array
      - collectionFormat: multi
        description: filter transactions by a range of last screened(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: last_screened
        type: array
      - collectionFormat: multi
        description: filter transactions by risk score provider
        in: query
        items:
          type: string
        name: risk_score_provider
        type: array
      - collectionFormat: multi
        description: A URL parameter that specifies the range of risk score. This
          format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis V1:low,high).
        in: query
        items:
          type: string
        name: risk_score
        type: array
      - collectionFormat: multi
        description: filter transactions by transaction status(0:Processing,1:Blocked,2:Pending
          On Beneficiary,3:Transfer To Beneficiary Failed,4:Pending On Originator,5:Transfer
          To Originator Failed,6:Confirmed,7:Confirm Failed,8:Rejected)
        in: query
        items:
          enum:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
          - 6
          - 7
          - 8
          type: integer
        name: status
        type: array
      - collectionFormat: multi
        description: filter transactions by transaction status text
        in: query
        items:
          enum:
          - Processing
          - Blocked
          - Pending On Beneficiary
          - Transfer To Beneficiary Failed
          - Pending On Originator
          - Transfer To Originator Failed
          - Confirmed
          - Confirm Failed
          - Rejected
          type: string
        name: status_text
        type: array
      - collectionFormat: multi
        description: A URL parameter that specifies the range of value. This format
          should be {from,to} (ie.value=0.1,10.5 means filtering transactions by value
          between 0.1 and 10.5 inclusive).
        in: query
        items:
          type: string
        name: value
        type: array
      - collectionFormat: multi
        description: A URL parameter that specifies the range of sanction screening
          score. This format should be {from,to} (ie.sanction_score=0.1,10.5 means
          filtering transactions by sanction_score between 0.1 and 10.5 inclusive).
        in: query
        items:
          type: string
        name: sanction_score
        type: array
      - collectionFormat: multi
        description: filter transactions by transaction protocol
        in: query
        items:
          enum:
          - SYGNA_BRIDGE
          - SYGNA_EMAIL_PROTOCOL
          - TRISA
          type: string
        name: protocol
        type: array
      - collectionFormat: multi
        description: filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: created_at
        type: array
      - description: A URL parameter that specifies the maximum number of records
          to return. This can be any positive integer between 1 and 1000 inclusive.
          If not specified, the default is 20.
        in: query
        name: limit
        type: integer
      - description: Specifies an offset that allows you to retrieve the next batch
          of records.Any positive integer.If not specified, the default is 0.
        in: query
        name: offset
        type: integer
      - collectionFormat: multi
        description: Specifies sequences to sort data (ie.orderby=id:desc)
        in: query
        items:
          type: string
        name: orderby
        type: array
      - collectionFormat: multi
        description: filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: updated_at
        type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schema.RespWithPaging'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schema.GetTransactionsResp'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: get transactions
      tags:
      - transactions
    post:
      parameters:
      - description: post /transactions params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/model.PostTransactionParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithMutation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: create transactions
      tags:
      - transactions
  /transactions/{id}:
    get:
      parameters:
      - description: transaction identifier
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schema.Resp'
            - properties:
                data:
                  $ref: '#/definitions/schema.GetTransactionResp'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: get specific transaction
      tags:
      - transactions
  /transactions/email-protocol/deposits:
    post:
      description: only for email protocol
      parameters:
      - description: post /transactions/email-protocol/deposits params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/model.PostEmailProtocolDepositParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithMutation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: send email to originator VASP and ask him to fill customer information
      tags:
      - transactions/email-protocol
  /transactions/email-protocol/deposits/permission:
    patch:
      description: only for email protocol
      parameters:
      - description: patch /transactions/email-protocol/deposits/permission params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/schema.PatchPermissionParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithMutation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: accept or reject this transaction when received customer information
        from originator
      tags:
      - transactions/email-protocol
  /transactions/email-protocol/deposits/permission-request:
    patch:
      description: only for email protocol
      parameters:
      - description: patch /transactions/email-protocol/deposits/permission-request
          params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/schema.PostEmailProtocolPermissionParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithMutation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: send own customer information to beneficairy or reject this request
        when received email from beneficiary
      tags:
      - transactions/email-protocol
  /transactions/email-protocol/deposits/txid:
    patch:
      description: only for email protocol
      parameters:
      - description: patch /transactions/email-protocol/deposits/txid params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/schema.PatchTxIdParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithMutation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: send transaction hash when received accpet from beneficairy
      tags:
      - transactions/email-protocol
  /transactions/email-protocol/permission:
    post:
      description: only for email protocol
      parameters:
      - description: post /transactions/email-protocol/permission params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/schema.PostEmailProtocolPermissionParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithMutation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: send permission to originator from email protocol VASP
      tags:
      - transactions/email-protocol
  /transactions/email-protocol/verify-token/{token}:
    get:
      description: only for email protocol
      parameters:
      - description: JWT token
        in: path
        name: token
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schema.Resp'
            - properties:
                data:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      summary: verify if token is valid and get its transaction identifier
      tags:
      - transactions/email-protocol
  /transactions/permission:
    patch:
      parameters:
      - description: patch /transactions/permission params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/schema.PatchPermissionParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithMutation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: send permission to originator
      tags:
      - transactions
  /transactions/sanction-report/{searchId}:
    get:
      parameters:
      - description: an identifier from sanction screening service
        in: path
        name: searchId
        required: true
        type: string
      produces:
      - application/pdf
      responses:
        "200":
          description: binary
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: get report from sanction screening service
      tags:
      - transactions
  /transactions/txid:
    patch:
      parameters:
      - description: patch /transactions/txid params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/schema.PatchTxIdParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithMutation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: send transaction identifier on blockchain to beneficiary
      tags:
      - transactions
  /transactions/wallet-address-filter:
    post:
      parameters:
      - description: post /transactions/wallet-address-filter params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/schema.PostWalletAddressFilterParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schema.Resp'
            - properties:
                data:
                  items:
                    items:
                      $ref: '#/definitions/schema.PostWalletAddressFilterResp'
                    type: array
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: use /wallet-address-filter from Sygna Bridge and use KYT service by
        own credential to get address information
      tags:
      - transactions
  /users:
    delete:
      description: |-
        only admin could use this method
        all accounts would be logout if admin deleted them
      parameters:
      - description: patch /users params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/schema.DeleteUsersParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithMutation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: delete users(member)
      tags:
      - users
    get:
      description: only admin could use this method
      parameters:
      - collectionFormat: multi
        description: filter users by identifier
        in: query
        items:
          type: string
        name: id
        type: array
      - collectionFormat: multi
        description: filter users by role identifier(0:admin 1:member)
        in: query
        items:
          enum:
          - 0
          - 1
          type: integer
        name: role_id
        type: array
      - collectionFormat: multi
        description: filter users by login account
        in: query
        items:
          type: string
        name: account
        type: array
      - collectionFormat: multi
        description: filter users by login type(only supported password and google
          now)
        in: query
        items:
          enum:
          - password
          - google
          type: string
        name: login_type
        type: array
      - collectionFormat: multi
        description: filter users by if status is activated
        in: query
        items:
          type: boolean
        name: is_active
        type: array
      - collectionFormat: multi
        description: filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: created_at
        type: array
      - description: A URL parameter that specifies the maximum number of records
          to return. This can be any positive integer between 1 and 1000 inclusive.
          If not specified, the default is 20.
        in: query
        name: limit
        type: integer
      - description: Specifies an offset that allows you to retrieve the next batch
          of records.Any positive integer.If not specified, the default is 0.
        in: query
        name: offset
        type: integer
      - collectionFormat: multi
        description: Specifies sequences to sort data (ie.orderby=id:desc)
        in: query
        items:
          type: string
        name: orderby
        type: array
      - collectionFormat: multi
        description: filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z'
          means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z
          inclusive)
        in: query
        items:
          type: string
        name: updated_at
        type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schema.RespWithPaging'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/model.User'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: get all users
      tags:
      - users
    patch:
      description: |-
        only admin could use this method
        all accounts would be logout if admin deactivated them
      parameters:
      - description: patch /users params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/schema.PatchUsersParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithMutation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: activate or deactivate users(member)
      tags:
      - users
    post:
      description: only admin could use this method
      parameters:
      - description: post /users params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/schema.PostUsersParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithMutation'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: create users
      tags:
      - users
  /users/{id}:
    get:
      description: |-
        admin could get specific or self user data
        member could only get self user data
      parameters:
      - description: specific user identifier or 'self' to get self user data
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schema.Resp'
            - properties:
                data:
                  $ref: '#/definitions/model.User'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: get specific or self user data
      tags:
      - users
  /users/change-password:
    patch:
      description: |-
        admin or member only could change self password
        all accounts would be logout if one of users changed password
        user must use password to login if he want to change his password
      parameters:
      - description: patch /users/change-password params
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.ChangePasswordParam'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithStatusAndMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: change login password
      tags:
      - users
  /users/link:
    post:
      description: admin or member could only link self account
      parameters:
      - description: post /users/link params
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/schema.PostUsersLinkParam'
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithStatusAndMessage'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: link your account to third party service
      tags:
      - users
  /users/link/{login_type}:
    delete:
      description: |-
        admin or member could only unlink self account
        all accounts which linked with specific third party service would be logout if one of users unlinked
      parameters:
      - description: login type which you want to unlink
        in: path
        name: login_type
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/schema.RespWithStatusAndMessage'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: unlink your account from third party service
      tags:
      - users
  /vendors/test:
    post:
      description: |-
        only allow admin to use this method
        only support Sygna Bridge,ComplyAdvantage,Elliptic,Chainalysis V1,Chainalysis V2,Merkle Science,TRISA for provider now
        only support Travel Rule,Blockchain Analytics,Sanction Screening for type now
      parameters:
      - description: post /vendors/test params
        in: body
        name: body
        required: true
        schema:
          items:
            $ref: '#/definitions/schema.PostVendorsTestParam'
          type: array
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/schema.Resp'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/schema.PostVendorsTestResp'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.SystemError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/errors.SystemError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/errors.SystemError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.SystemError'
      security:
      - CookieAuth: []
      summary: test if thirdparty service is available
      tags:
      - vendors
schemes:
- https
securityDefinitions:
  CookieAuth:
    in: header
    name: Cookie
    type: apiKey
swagger: "2.0"
