{
  "openapi": "3.0.1",
  "info": {
    "title": "Sygna HUB",
    "description": "Sygna Hub API",
    "contact": {},
    "version": "1.17.0"
  },
  "servers": [
    {
      "url": "httsp://example.com/v1",
      "description": ""
    }
  ],
  "paths": {
    "/": {
      "get": {
        "tags": [
          "self"
        ],
        "summary": "get current release, version the path could be used for health check",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/schema.GetRootOutput"
                    },
                    "schema.Resp": {
                      "$ref": "#/components/schemas/schema.Resp"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        }
      }
    },
    "/currencies": {
      "get": {
        "summary": "Get supported currencies",
        "operationId": "GetCurrencies",
        "parameters": [
          {
            "name": "currency_id",
            "in": "query",
            "description": "filter currencies by currency identifier",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "currency_symbol",
            "in": "query",
            "description": "filter currencies data by currency symbol",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "currency_name",
            "in": "query",
            "description": "filter currencies data by currency name",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "kyt_provider",
            "in": "query",
            "description": "filter currencies data by kyt providers",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "filter currencies by if status is activated",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "updated_at",
            "in": "query",
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/model.Currency"
                      }
                    },
                    "schema.RespWithPaging": {
                      "$ref": "#/components/schemas/schema.RespWithPaging"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "description": "Please refer to the GET /currencies API response body for the \"key\" in each coin/token's extra information (addr_extra_info).",
        "tags": [
          "Hub/currencies"
        ]
      }
    },
    "/customers": {
      "get": {
        "tags": [
          "Hub/customers"
        ],
        "summary": "Get customers",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "filter customers by customer identifier",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "filter customers by customer name",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "filter customers by if status is activated",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "risk_score_provider",
            "in": "query",
            "description": "filter customers by risk score provider",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Elliptic",
                  "Chainalysis V1",
                  "Chainalysis V2",
                  "Merkle Science",
                  "Dow Jones",
                  "Coinfirm",
                  "Coinfirm (Sandbox)"
                ]
              }
            }
          },
          {
            "name": "max_risk_score",
            "in": "query",
            "description": "A URL parameter that specifies the range of max risk score. This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis V1:low,high).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "avg_risk_score",
            "in": "query",
            "description": "A URL parameter that specifies the range of average risk score. This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis V1:low,high).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "filter customers by labels from KYT service searched",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "last_screened",
            "in": "query",
            "description": "filter customers by a range of last screened date(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "updated_at",
            "in": "query",
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/schema.GetCustomersOutput"
                      }
                    },
                    "schema.RespWithPaging": {
                      "$ref": "#/components/schemas/schema.RespWithPaging"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "put": {
        "tags": [
          "Hub/customers"
        ],
        "summary": "update customers",
        "requestBody": {
          "description": "put /customers params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PutCustomersInput"
                }
              },
              "examples": {
                "Example": {
                  "value": [
                    {
                      "is_active": false,
                      "customer_type": 0,
                      "customer_id": "yuweiwei",
                      "country": "TW",
                      "natural_person_name": {
                        "name": {
                          "first_name": "yuwei",
                          "last_name": "chen"
                        }
                      },
                      "assets": [
                        {
                          "address": "3MBWbunF8kLFA5u9E8mk4MYkWKJNedpx55",
                          "extra_info": {},
                          "id": "be54f510-8859-405d-a104-7eaeb2c53630",
                          "currency_id": "sygna:0x80000000"
                        },
                        {
                          "address": "0x1b7844ed817ebF8B559D25A4f6D9F45931227970",
                          "extra_info": {},
                          "id": "862670a5-e079-418f-b07e-3946f951583d",
                          "currency_id": "sygna:0x8000003c"
                        }
                      ],
                      "national": {
                        "national_identifier_type": "CCPT",
                        "national_identifier": "1111-1111-1111-1111",
                        "country_of_issue": "TW",
                        "registration_authority": "Coolbitx"
                      },
                      "birth": {
                        "place_of_birth": "Taipei Zoo",
                        "date_of_birth": "2022-11-30"
                      },
                      "id": "b52e9794-1ea1-42ad-8a59-db582bf7bb07",
                      "assets_ignore_kyt": true
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "operationId": ""
      },
      "post": {
        "tags": [
          "Hub/customers"
        ],
        "summary": "Create customers",
        "requestBody": {
          "description": "post /customers params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PostCustomersInput"
                }
              },
              "examples": {
                "Natural Person": {
                  "value": [
                    {
                      "is_active": true,
                      "customer_type": 0,
                      "customer_id": "yuweiwei",
                      "country": "TW",
                      "natural_person_name": {
                        "name": {
                          "first_name": "yuwei",
                          "last_name": "chen"
                        }
                      },
                      "birth": {
                        "place_of_birth": "Taipei Zoo",
                        "date_of_birth": "2022-11-30"
                      },
                      "national": {
                        "national_identifier_type": "CCPT",
                        "national_identifier": "1111-1111-1111",
                        "country_of_issue": "TW",
                        "registration_authority": "Coolbitx"
                      },
                      "assets": [
                        {
                          "address": "3MBWbunF8kLFA5u9E8mk4MYkWKJNedpx55",
                          "extra_info": {},
                          "currency_id": "sygna:0x80000000"
                        },
                        {
                          "address": "0x1b7844ed817ebF8B559D25A4f6D9F45931227970",
                          "extra_info": {},
                          "currency_id": "sygna:0x8000003c"
                        }
                      ],
                      "assets_ignore_kyt": true
                    }
                  ]
                },
                "Legal Person": {
                  "value": [
                    {
                      "is_active": true,
                      "customer_type": 1,
                      "customer_id": "cb001",
                      "country": "TW",
                      "legal_person_name": {
                        "name": "Coolbitx"
                      },
                      "address": {
                        "address_type": "HOME",
                        "country": "TW",
                        "department": "",
                        "sub_department": "",
                        "street_name": "Changchun Road",
                        "building_number": "",
                        "building_name": "",
                        "floor": "",
                        "post_box": "",
                        "room": "",
                        "post_code": "",
                        "town_name": "Taipei",
                        "town_location_name": "",
                        "district_name": "",
                        "country_sub_division": "",
                        "address_line": [
                          "8 F., No. 176, Changchun Rd., Zhongshan Dist., Taipei City 10485, Taiwan (R.O.C.)"
                        ]
                      },
                      "assets": [
                        {
                          "address": "0xC964bE081211144e987828293dffa5828c6f509b",
                          "extra_info": {
                            "flag": "1"
                          },
                          "currency_id": "sygna:0x800002ca"
                        }
                      ],
                      "assets_ignore_kyt": true
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      },
      "patch": {
        "tags": [
          "Hub/customers"
        ],
        "summary": "update customers",
        "requestBody": {
          "description": "patch /customers params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PatchCustomersInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "id": "5bd43419-aff3-4828-b739-3319ed4fffb6",
                      "is_actie": false
                    }
                  ]
                },
                "Example 2": {
                  "value": [
                    {
                      "id": "b52e9794-1ea1-42ad-8a59-db582bf7bb07",
                      "is_active": true
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ]
      }
    },
    "/customers-export": {
      "get": {
        "summary": "generate customers report",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "filter customers by customer identifier",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "filter customers by customer name",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "filter customers by if status is activated",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "risk_score_provider",
            "in": "query",
            "description": "filter customers by risk score provider",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Elliptic",
                  "Chainalysis V1",
                  "Chainalysis V2",
                  "Merkle Science",
                  "Dow Jones",
                  "Coinfirm",
                  "Coinfirm (Sandbox)"
                ]
              }
            }
          },
          {
            "name": "max_risk_score",
            "in": "query",
            "description": "A URL parameter that specifies the range of max risk score. This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis V1:low,high).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "avg_risk_score",
            "in": "query",
            "description": "A URL parameter that specifies the range of average risk score. This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis V1:low,high).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "label",
            "in": "query",
            "description": "filter customers by labels from KYT service searched",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "last_screened",
            "in": "query",
            "description": "filter customers by a range of last screened date(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "updated_at",
            "in": "query",
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/customers-export"
        ]
      }
    },
    "/customers-export/download": {
      "get": {
        "summary": "download customer report",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/customers-export"
        ]
      }
    },
    "/customers-export/status": {
      "get": {
        "summary": "get customer report processing status",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/model.Report"
                    },
                    "schema.Resp": {
                      "$ref": "#/components/schemas/schema.Resp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/customers-export"
        ]
      }
    },
    "/customers/{id}": {
      "get": {
        "summary": "get specific customer detail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "customer identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "asset_id",
            "in": "query",
            "description": "filter asset by ids in current customer",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "asset_currency_id",
            "in": "query",
            "description": "filter asset by currency id in current customer",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "asset_risk_score",
            "in": "query",
            "description": "filter asset by risk score in current customer",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "asset_address",
            "in": "query",
            "description": "filter asset by address in current customer",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "asset_label",
            "in": "query",
            "description": "filter asset by label in current customer",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "asset_value",
            "in": "query",
            "description": "filter asset by value in current customer",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "asset_last_screened",
            "in": "query",
            "description": "filter asset by last screen time in current customer",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/schema.GetCustomerOutput"
                    },
                    "schema.Resp": {
                      "$ref": "#/components/schemas/schema.Resp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/customers"
        ]
      }
    },
    "/data-transfer-export": {
      "get": {
        "summary": "generate transaction report",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "filter transactions by transaction identifier",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "filter transactions by customer name",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "filter transactions by transaction address",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tx_id",
            "in": "query",
            "description": "filter transactions by transaction id on blockchain",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "currency_id",
            "in": "query",
            "description": "filter transactions by transaction currency id",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "last_screened",
            "in": "query",
            "description": "filter transactions by a range of last screened(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "risk_score_provider",
            "in": "query",
            "description": "filter transactions by risk score provider",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "risk_score",
            "in": "query",
            "description": "A URL parameter that specifies the range of risk score. This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis V1:low,high).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "filter transactions by transaction status(0:Processing,1:Blocked,2:Pending On Beneficiary,3:Transfer To Beneficiary Failed,4:Pending On Originator,5:Transfer To Originator Failed,6:Confirmed,7:Confirm Failed,8:Rejected)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "status_text",
            "in": "query",
            "description": "filter transactions by transaction status text",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Processing",
                  "Blocked",
                  "Pending On Beneficiary",
                  "Transfer To Beneficiary Failed",
                  "Pending On Originator",
                  "Transfer To Originator Failed",
                  "Confirmed",
                  "Confirm Failed",
                  "Rejected"
                ]
              }
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "A URL parameter that specifies the range of value. This format should be {from,to} (ie.value=0.1,10.5 means filtering transactions by value between 0.1 and 10.5 inclusive).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sanction_score",
            "in": "query",
            "description": "A URL parameter that specifies the range of sanction screening score. This format should be {from,to} (ie.sanction_score=0.1,10.5 means filtering transactions by sanction_score between 0.1 and 10.5 inclusive).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "description": "filter transactions by transaction protocol",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Sygna_Bridge",
                  "Sygna_EmailProtocol",
                  "TRISA"
                ]
              }
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "updated_at",
            "in": "query",
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/data-transfer-export"
        ]
      }
    },
    "/data-transfer-export/download": {
      "get": {
        "summary": "download transactions report",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/data-transfer-export"
        ]
      }
    },
    "/data-transfer-export/status": {
      "get": {
        "summary": "get transaction report processing status",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/model.Report"
                    },
                    "schema.Resp": {
                      "$ref": "#/components/schemas/schema.Resp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/data-transfer-export"
        ]
      }
    },
    "/global-vasp": {
      "get": {
        "summary": "get global-vasp",
        "description": "only admin could get encrypted credentials",
        "parameters": [
          {
            "name": "vasp_identifier",
            "in": "query",
            "description": "filter global vasp by vasp identifier",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "vasp_name",
            "in": "query",
            "description": "filter global vasp data by vasp name",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "description": "filter global vasp data by protocol",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Sygna_Bridge",
                  "Sygna_EmailProtocol",
                  "TRISA",
                  "VerifyVASP",
                  "Notabene_TR:NOW",
                  "Veriscope on Shyft"
                ]
              }
            }
          },
          {
            "name": "extra_info[key]",
            "in": "query",
            "description": "filter global vasp data by extra_info's key",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "updated_at",
            "in": "query",
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string"
                          },
                          "created_at": {
                            "type": "string"
                          },
                          "updated_at": {
                            "type": "string"
                          },
                          "vasp_identifier": {
                            "type": "string",
                            "description": "Sygna: VASP code; TRISA: Member ID"
                          },
                          "protocol": {
                            "type": "string"
                          },
                          "vasp_name": {
                            "type": "string",
                            "description": "complete VASP name"
                          },
                          "extra_info": {
                            "type": "object",
                            "description": "extra_info content will be different depend on the protocol that VASP belongs to",
                            "properties": {
                              "country_code": {
                                "type": "string"
                              },
                              "regulatory_status": {
                                "type": "string",
                                "description": "information from Sygna parter: VASPnet"
                              },
                              "supervisory_authority": {
                                "type": "string",
                                "description": "information from Sygna parter: VASPnet"
                              },
                              "vasp_pubkey": {
                                "type": "string"
                              },
                              "business_category": {
                                "type": "integer",
                                "description": "information from Sygna partner: TRISA"
                              },
                              "common_name": {
                                "type": "string",
                                "description": "TRISA VASP's common ID"
                              },
                              "country": {
                                "type": "string"
                              },
                              "endpoint": {
                                "type": "string",
                                "description": "TRISA Service Endpoint"
                              },
                              "registered_directory": {
                                "type": "string",
                                "description": "information from Sygna partner: TRISA"
                              },
                              "vasp_categories": {
                                "type": "array",
                                "description": "information from Sygna partner: TRISA",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "verified_on": {
                                "type": "string",
                                "description": "information from Sygna partner: TRISA"
                              },
                              "website": {
                                "type": "string",
                                "description": "information from Sygna partner: TRISA"
                              }
                            }
                          },
                          "vasp_server_status": {
                            "type": "string",
                            "description": "Sygna VASP server health check status: healthy, unhealthy or unknown"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/global-vasp"
        ]
      }
    },
    "/oauth2": {
      "post": {
        "summary": "get oauth token",
        "requestBody": {
          "description": "post /oauth2 param",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/schema.PostOauthInput"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "account": "originator@gmail.com",
                    "credential": "P@ssword0",
                    "login_type": "password"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithStatus"
                },
                "examples": {
                  "Example 1": {
                    "value": {
                      "data": {
                        "accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlX2lkIjowLCJhdWQiOiJvcmlnaW5hdG9yQGdtYWlsLmNvbSIsImV4cCI6MTY3MjgzMjg0NiwiaWF0IjoxNjcyNzk2ODQ2LCJpc3MiOiJzeWduYS1idW5kbGUtcHJvZHVjdCIsInZhc3BfY29kZSI6IkNZV1dUV1RZIiwidXNlcl9pZCI6IjQ3Zjk5MjcwLWEzYjMtNGZmMy1iMjE0LWEzMWY5MTZjMTBlMCIsImxvZ2luX3R5cGUiOiJwYXNzd29yZCIsImxvZ2luX2lkIjoiZWNlY2RlNWQtZDA1ZS00Yzc5LThjOWEtZDZlNTIxM2FkZDdjIiwiYWNjb3VudCI6Im9yaWdpbmF0b3JAZ21haWwuY29tIn0.1fRpXseNGrRrWkPRCkTIoAMhIHpjV9E-bb8qMiK7XeE",
                        "success": true
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "description": "API accessToken will be in the API response body and header set-cookie (cookie will be deprecated after 2023.2.1)",
        "tags": [
          "Hub/oauth2"
        ]
      },
      "delete": {
        "summary": "delete oauth token from database",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/oauth2"
        ]
      }
    },
    "/ownerships": {
      "get": {
        "summary": "the API would be used when you want to see a list of all validations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/model.Ownership"
                      }
                    },
                    "schema.RespWithPaging": {
                      "$ref": "#/components/schemas/schema.RespWithPaging"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/ownerships"
        ]
      },
      "post": {
        "summary": "the API would be used when you want to validate an address whether belong to a user who owns private wallet",
        "parameters": [
          {
            "name": "accept_high_risk",
            "in": "query",
            "description": "the validation would be sent even if the addresses are risky",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "description": "post /ownerships params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PostOwnershipInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "owner_email": "owner@example.com",
                      "transaction_information": {
                        "vasp_beneficiary_wallet_address": "1Ed5wjp7LpcU5tzQBNnKkk5zWDdpJ3e3bP",
                        "currency_id": "sygna:0x80000000",
                        "value": "1"
                      },
                      "private_wallet_address": [
                        "1N7BCTX2uEjsRUoDtfeZTjaTEXuDZSsR3R"
                      ],
                      "sender_email": "my@example.com"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/ownerships"
        ]
      }
    },
    "/ownerships/cancel": {
      "patch": {
        "summary": "you couldn't validate some address that it is processing or accepted until you cancel it",
        "requestBody": {
          "description": "patch /ownerships/cancel params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PatchOwnershipIdInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/ownerships"
        ]
      }
    },
    "/ownerships/confirm": {
      "patch": {
        "summary": "the API would be used when you received a reply from the receiver and you want to accept or reject the reply",
        "requestBody": {
          "description": "patch /ownerships/confirm params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PatchOwnershipConfirmInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "accept": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08"
                        }
                      ],
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "reject": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "reject_code": "BVRC001",
                          "reject_message": "string"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/ownerships"
        ]
      }
    },
    "/ownerships/resend": {
      "patch": {
        "summary": "the API would be used when a receiver lets you send a email again",
        "requestBody": {
          "description": "patch /ownerships/resend params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PatchOwnershipIdInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/ownerships"
        ]
      }
    },
    "/ownerships/unblock": {
      "patch": {
        "summary": "the API would be used when the validation that including risky address wouldn't be sent until you unblock it",
        "requestBody": {
          "description": "patch /ownerships/unblock params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PatchOwnershipIdInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/ownerships"
        ]
      }
    },
    "/ownerships/validate": {
      "patch": {
        "summary": "the API would be used when you get the ownership identifier from the link that you received and want to reply to the validation",
        "requestBody": {
          "description": "patch /ownerships/validate params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PatchOwnershipValidationInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "accept": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "txid": "string"
                        }
                      ],
                      "owner_info": {},
                      "reject": [
                        {
                          "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                          "reject_code": "BVRC001",
                          "reject_message": "string"
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/ownerships"
        ]
      }
    },
    "/ownerships/verify-token/{token}": {
      "get": {
        "summary": "the API would be used when you received a link that asks you to validate the address whether belong to you",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "JWT token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    },
                    "schema.Resp": {
                      "$ref": "#/components/schemas/schema.Resp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/ownerships"
        ]
      }
    },
    "/ownerships/{id}": {
      "get": {
        "summary": "the API would be used when you want to see a validation detail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ownership identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/model.Ownership"
                    },
                    "schema.RespWithPaging": {
                      "$ref": "#/components/schemas/schema.RespWithPaging"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/ownerships"
        ],
        "description": ""
      }
    },
    "/rollback": {
      "get": {
        "summary": "get rollback",
        "description": "only admin could get encrypted credentials",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/model.Rollback"
                      }
                    },
                    "schema.RespWithPaging": {
                      "$ref": "#/components/schemas/schema.RespWithPaging"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/rollback"
        ]
      },
      "put": {
        "summary": "update rollback",
        "description": "only allow admin to use this method",
        "requestBody": {
          "description": "put /rollback params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PutRollbackInout"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/rollback"
        ]
      }
    },
    "/services": {
      "get": {
        "summary": "get services",
        "description": "only admin could get encrypted credentials",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "filter services by service identifier",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "description": "filter services by provider",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Sygna_Bridge",
                  "Elliptic",
                  "Chainalysis V1",
                  "Chainalysis V2",
                  "ComplyAdvantage",
                  "Merkle Science",
                  "TRISA",
                  "Dow Jones",
                  "Coinfirm",
                  "Coinfirm (Sandbox)"
                ]
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "filter services by type",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Travel Rule",
                  "Blockchain Analytics",
                  "Sanction Screening"
                ]
              }
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "filter services by if status is activated",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "filter services by status",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "activated",
                  "deactivated",
                  "disabled",
                  "upcoming",
                  "expired"
                ]
              }
            }
          },
          {
            "name": "start_time",
            "in": "query",
            "description": "filter services by a range of start time(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "end_time",
            "in": "query",
            "description": "filter services by a range of end time(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "updated_at",
            "in": "query",
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/model.Service"
                      }
                    },
                    "schema.RespWithPaging": {
                      "$ref": "#/components/schemas/schema.RespWithPaging"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/services"
        ]
      },
      "put": {
        "summary": "update services",
        "description": "only allow admin to use this method\nuse GET /services/supported to understand which credential is required by provider",
        "requestBody": {
          "description": "put /services params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PutServicesInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "credential": {},
                      "is_active": true,
                      "provider": "Elliptic",
                      "settings": {},
                      "type": "Blockchain Analytics"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/services"
        ]
      },
      "post": {
        "summary": "create services",
        "description": "Please must input “type”: “Travel Rule” & “provider”: “Sygna_Bridge” to enable your Sygna Hub’s data transfer via Sygna Bridge Travel Rule Protocol. (Only allow admin to use this method use GET /services/supported to understand which credential is required by provider.)",
        "requestBody": {
          "description": "post /services params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PostServicesInput"
                }
              },
              "examples": {
                "Chainalysis V1": {
                  "value": [
                    {
                      "type": "Blockchain Analytics",
                      "provider": "Chainalysis V1",
                      "is_active": true,
                      "credential": {
                        "api_key": "aaaaaa"
                      }
                    }
                  ]
                },
                "Chainalysis V2": {
                  "value": [
                    {
                      "type": "Blockchain Analytics",
                      "provider": "Chainalysis V2",
                      "is_active": true,
                      "credential": {
                        "api_key": "bbbbb"
                      },
                      "settings": {
                        "high_risk_score": "HIGH"
                      }
                    }
                  ]
                },
                "Elliptic": {
                  "value": [
                    {
                      "type": "Blockchain Analytics",
                      "provider": "Elliptic",
                      "is_active": true,
                      "credential": {
                        "secret": "aaaaa",
                        "api_key": "bbbbb"
                      },
                      "settings": {
                        "high_risk_score": 8
                      }
                    }
                  ]
                },
                "Coinfirm": {
                  "value": [
                    {
                      "type": "Blockchain Analytics",
                      "provider": "Coinfirm",
                      "is_active": true,
                      "credential": {
                        "api_key": "bbbb"
                      },
                      "settings": {
                        "high_risk_score": 50
                      }
                    }
                  ]
                },
                "Coinfirm (Sandbox)": {
                  "value": [
                    {
                      "type": "Blockchain Analytics",
                      "provider": "Coinfirm (Sandbox)",
                      "is_active": true,
                      "credential": {
                        "sandbox_access_token": "3uhQGUlzNTsKTVUJOwC0dvG0A2RuA6ieV9LckrHdcY0AXQciDnnoxBvXJs2aS8ha"
                      },
                      "settings": {
                        "high_risk_score": 50
                      }
                    }
                  ]
                },
                "Merkle Science": {
                  "value": [
                    {
                      "type": "Blockchain Analytics",
                      "provider": "Merkle Science",
                      "is_active": true,
                      "credential": {},
                      "settings": {
                        "high_risk_score": 3
                      }
                    }
                  ]
                },
                "ComplyAdvantage": {
                  "value": [
                    {
                      "type": "Sanction Screening",
                      "provider": "ComplyAdvantage",
                      "is_active": true,
                      "credential": {
                        "api_key": "bbbb"
                      },
                      "settings": {
                        "fuzziness": 0.6
                      }
                    }
                  ]
                },
                "Dow Jones": {
                  "value": [
                    {
                      "type": "Sanction Screening",
                      "provider": "Dow Jones",
                      "is_active": true,
                      "credential": {
                        "password": "password",
                        "username": "user1101",
                        "client_id": "xxxxxx"
                      },
                      "settings": {
                        "content_set": [
                          "Watchlist"
                        ],
                        "search_type": "Near"
                      }
                    }
                  ]
                },
                "Sygna_Bridge": {
                  "value": [
                    {
                      "type": "Travel Rule",
                      "provider": "Sygna_Bridge",
                      "is_active": true,
                      "credential": {
                        "private_key": "xxxx"
                      },
                      "settings": {
                        "expire_days": 30,
                        "need_validate_address": true
                      }
                    }
                  ]
                },
                "TRISA": {
                  "value": [
                    {
                      "type": "Travel Rule",
                      "provider": "TRISA",
                      "is_active": true,
                      "credential": {
                        "p12": "",
                        "password": "FSDFEWGDSGERG",
                        "registration_id": "tttt"
                      }
                    }
                  ]
                },
                "Veriscope on Shyft": {
                  "value": [
                    {
                      "type": "Travel Rule",
                      "provider": "Veriscope on Shyft",
                      "is_active": true,
                      "credential": {
                        "private_key": "7d919954170d1b35a186a44b7df63fd7fada892b891d423cbb851bb3fa44a343"
                      }
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "parameters": [],
        "tags": [
          "Hub/services"
        ]
      }
    },
    "/services/supported": {
      "get": {
        "summary": "get supported services and its config",
        "description": "only allow admin to use this method",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "filter services by service identifier",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "provider",
            "in": "query",
            "description": "filter services by provider",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Sygna_Bridge",
                  "Elliptic",
                  "Chainalysis V1",
                  "Chainalysis V2",
                  "ComplyAdvantage",
                  "Merkle Science",
                  "TRISA",
                  "Dow Jones",
                  "Coinfirm",
                  "Coinfirm (Sandbox)"
                ]
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "filter services by type",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Travel Rule",
                  "Blockchain Analytics",
                  "Sanction Screening"
                ]
              }
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "filter services by if status is activated",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "editable",
            "in": "query",
            "description": "filter services by editable",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "updated_at",
            "in": "query",
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/model.SupportedService"
                      }
                    },
                    "schema.RespWithPaging": {
                      "$ref": "#/components/schemas/schema.RespWithPaging"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/services"
        ]
      }
    },
    "/settings": {
      "get": {
        "summary": "get settings",
        "description": "only admin could get encrypted credentials",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/model.Setting"
                      }
                    },
                    "schema.RespWithPaging": {
                      "$ref": "#/components/schemas/schema.RespWithPaging"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/settings"
        ]
      },
      "put": {
        "summary": "update settings",
        "description": "only allow admin to use this method",
        "requestBody": {
          "description": "put /settings params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PostSettingInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "type": "blockchain_analytics_timing",
                      "rule": {
                        "originator": "before sending",
                        "beneficiary": "receiving"
                      }
                    },
                    {
                      "type": "sanction_screening_timing",
                      "rule": {
                        "originator": "before sending",
                        "beneficiary": "receiving"
                      }
                    },
                    {
                      "type": "automation_settings",
                      "rule": {
                        "auto_accept": true
                      }
                    },
                    {
                      "type": "personal_info_checking_items",
                      "rule": {
                        "follow_ivms101": true,
                        "name_checking_rule": "one_name_matched"
                      }
                    },
                    {
                      "type": "forced_sending_when_VASP_is_not_healthy",
                      "rule": {
                        "forced_sending": true
                      }
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/settings"
        ]
      },
      "post": {
        "summary": "create settings",
        "description": "only allow admin to use this method. \nPlease also check the API response of GET `/settings/supported` to get the complete supported settings configuration.",
        "requestBody": {
          "description": "post /settings params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PostSettingInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "type": "blockchain_analytics_timing",
                      "rule": {
                        "originator": "before sending",
                        "beneficiary": "receiving"
                      }
                    },
                    {
                      "type": "sanction_screening_timing",
                      "rule": {
                        "originator": "before sending",
                        "beneficiary": "receiving"
                      }
                    },
                    {
                      "type": "automation_settings",
                      "rule": {
                        "auto_accept": true
                      }
                    },
                    {
                      "type": "personal_info_checking_items",
                      "rule": {
                        "follow_ivms101": true,
                        "name_checking_rule": "one_name_matched"
                      }
                    },
                    {
                      "type": "forced_sending_when_VASP_is_not_healthy",
                      "rule": {
                        "forced_sending": true
                      }
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/settings"
        ]
      }
    },
    "/settings/default": {
      "get": {
        "summary": "get default settings",
        "description": "only allow admin to use this method",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/schema.PostSettingInput"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/settings"
        ]
      }
    },
    "/settings/supported": {
      "get": {
        "summary": "get supported settings",
        "description": "",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/model.SupportedSetting"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/settings"
        ]
      }
    },
    "/transactions": {
      "get": {
        "summary": "get transactions",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "filter transactions by transaction identifier",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "filter transactions by the customer's name ( the phonetic name and local name is also applicable)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "address",
            "in": "query",
            "description": "filter transactions by transaction address",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "tx_id",
            "in": "query",
            "description": "filter transactions by transaction id on blockchain",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "currency_id",
            "in": "query",
            "description": "filter transactions by transaction currency id",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "last_screened",
            "in": "query",
            "description": "filter transactions by a range of last screened(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "risk_score_provider",
            "in": "query",
            "description": "filter transactions by risk score provider",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "risk_score",
            "in": "query",
            "description": "A URL parameter that specifies the range of risk score. This format should be {provider:from,to} (ie.Elliptic:0,10 or Chainalysis V1:low,high).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "filter transactions by transaction status(0:Processing,1:Blocked,2:Pending On Beneficiary,3:Transfer To Beneficiary Failed,4:Pending On Originator,5:Transfer To Originator Failed,6:Confirmed,7:Confirm Failed,8:Rejected)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "status_text",
            "in": "query",
            "description": "filter transactions by transaction status text",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Processing",
                  "Blocked",
                  "Pending On Beneficiary",
                  "Transfer To Beneficiary Failed",
                  "Pending On Originator",
                  "Transfer To Originator Failed",
                  "Confirmed",
                  "Confirm Failed",
                  "Rejected"
                ]
              }
            }
          },
          {
            "name": "value",
            "in": "query",
            "description": "A URL parameter that specifies the range of value. This format should be {from,to} (ie.value=0.1,10.5 means filtering transactions by value between 0.1 and 10.5 inclusive).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sanction_score",
            "in": "query",
            "description": "A URL parameter that specifies the range of sanction screening score. This format should be {from,to} (ie.sanction_score=0.1,10.5 means filtering transactions by sanction_score between 0.1 and 10.5 inclusive).",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "description": "filter transactions by transaction protocol",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "Sygna_Bridge",
                  "Sygna_EmailProtocol",
                  "TRISA",
                  "Veriscope on Shyft"
                ]
              }
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "updated_at",
            "in": "query",
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/schema.GetTransactionsOutput"
                      }
                    },
                    "schema.RespWithPaging": {
                      "$ref": "#/components/schemas/schema.RespWithPaging"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/transactions"
        ]
      },
      "post": {
        "summary": "create transactions",
        "requestBody": {
          "description": "post /transactions params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/PostTransactionUnknown"
                    },
                    {
                      "$ref": "#/components/schemas/PostTransactionSygnaBridge"
                    },
                    {
                      "$ref": "#/components/schemas/PostTransactionSygnaEmail"
                    },
                    {
                      "$ref": "#/components/schemas/PostTransactionTRISA"
                    },
                    {
                      "$ref": "#/components/schemas/PostTransactionShyft"
                    }
                  ]
                }
              },
              "examples": {
                "Unknown": {
                  "value": [
                    {
                      "customer_id": "6bf8c118-3395-40fa-83d3-be3be1a5f95f",
                      "currency_id": "sygna:0x80000000",
                      "value": "111",
                      "originator": {
                        "assets": [
                          "190c2b76-6a93-4f58-ae3b-2b21b0157083"
                        ]
                      },
                      "beneficiary": {
                        "addrs": [
                          {
                            "address": "3MBWbunF8kLFA5u9E8mk4MYkWKJNedpx55",
                            "extra_info": {}
                          }
                        ],
                        "customer_type": 0
                      }
                    }
                  ]
                },
                "Sygna Bridge": {
                  "value": [
                    {
                      "customer_id": "6bf8c118-3395-40fa-83d3-be3be1a5f95f",
                      "currency_id": "sygna:0x80000000",
                      "value": "111",
                      "originator": {
                        "assets": [
                          "190c2b76-6a93-4f58-ae3b-2b21b0157083"
                        ]
                      },
                      "beneficiary": {
                        "addrs": [
                          {
                            "address": "3MBWbunF8kLFA5u9E8mk4MYkWKJNedpx55",
                            "extra_info": {}
                          }
                        ],
                        "customer_type": 0,
                        "vasp_code": "CYWWTWTY",
                        "private_info": {
                          "natural_person_name": {
                            "name": {
                              "last_name": "Yuwei Chen"
                            }
                          }
                        }
                      },
                      "expire_date": null,
                      "protocol": "Sygna_Bridge"
                    }
                  ]
                },
                "Sygna Email": {
                  "value": [
                    {
                      "customer_id": "6bf8c118-3395-40fa-83d3-be3be1a5f95f",
                      "currency_id": "sygna:0x80000000",
                      "value": "222",
                      "originator": {
                        "assets": [
                          "190c2b76-6a93-4f58-ae3b-2b21b0157083"
                        ]
                      },
                      "beneficiary": {
                        "addrs": [
                          {
                            "address": "bc1qgdjqv0av3q56jvd82tkdjpy7gdp9ut8tlqmgrpmv24sq90ecnvqqjwvw97",
                            "extra_info": {}
                          }
                        ]
                      },
                      "protocol": "Sygna_EmailProtocol"
                    }
                  ]
                },
                "TRISA": {
                  "value": [
                    {
                      "customer_id": "78045c2e-f82a-4d85-ad80-a3a450a2c3f9",
                      "currency_id": "sygna:0x80000000",
                      "value": "444",
                      "originator": {
                        "assets": [
                          "0bf367bb-7144-49ba-816b-ef4071f05995"
                        ]
                      },
                      "beneficiary": {
                        "addrs": [
                          {
                            "address": "3MBWbunF8kLFA5u9E8mk4MYkWKJNedpx55",
                            "extra_info": {}
                          }
                        ],
                        "customer_type": 0,
                        "vasp_code": "COOLBITX LTD. TAIWAN BRANCH (CAYMAN) - DEV-HUB",
                        "private_info": {
                          "natural_person_name": {
                            "name": {
                              "last_name": "Coolbitx"
                            }
                          }
                        }
                      },
                      "txid": "xxxxxxxxxxxx",
                      "protocol": "TRISA"
                    }
                  ]
                },
                "Veriscope on Shyft": {
                  "value": [
                    {
                      "customer_id": "14e67e17-7b02-43a5-8e2e-06a4ad827c43",
                      "currency_id": "sygna:0x80000000",
                      "value": "111",
                      "originator": {
                        "assets": [
                          "5b6c6789-6c9c-4239-a4d6-f7c2470dbf92"
                        ]
                      },
                      "beneficiary": {
                        "addrs": [
                          {
                            "address": "1LinPJGYAVsraWnyEY4iDPVroD1Fi6NrLz",
                            "extra_info": {}
                          }
                        ]
                      },
                      "protocol": "Veriscope on Shyft"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/transactions"
        ]
      }
    },
    "/transactions/email-protocol/deposits": {
      "post": {
        "summary": "send email to originator VASP and ask him to fill customer information",
        "description": "only for email protocol",
        "requestBody": {
          "description": "post /transactions/email-protocol/deposits params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/model.PostEmailProtocolDepositInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "customer_id": "b52e9794-1ea1-42ad-8a59-db582bf7bb07",
                      "currency_id": "sygna:0x80000000",
                      "value": "2",
                      "beneficiary": {
                        "assets": [
                          "be54f510-8859-405d-a104-7eaeb2c53630"
                        ]
                      },
                      "originator": {
                        "addrs": [
                          {
                            "address": "1Bxzf2hA8FrRkpKU3VQNrgLu6iEGo6bUm7",
                            "extra_info": {}
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/transactions/email-protocol"
        ]
      }
    },
    "/transactions/email-protocol/deposits/permission": {
      "patch": {
        "summary": "accept or reject this transaction when received customer information from originator",
        "description": "only for email protocol",
        "requestBody": {
          "description": "patch /transactions/email-protocol/deposits/permission params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PatchPermissionInput"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/transactions/email-protocol"
        ]
      }
    },
    "/transactions/email-protocol/deposits/permission-request": {
      "patch": {
        "summary": "send own customer information to beneficiary or reject this request when received email from beneficiary",
        "description": "only for email protocol",
        "requestBody": {
          "description": "patch /transactions/email-protocol/deposits/permission-request params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PostEmailProtocolPermissionInput"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/transactions/email-protocol"
        ]
      }
    },
    "/transactions/email-protocol/deposits/txid": {
      "patch": {
        "summary": "send transaction hash when received accept from beneficiary",
        "description": "only for email protocol",
        "requestBody": {
          "description": "patch /transactions/email-protocol/deposits/txid params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PatchTxIdInput"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/transactions/email-protocol"
        ]
      }
    },
    "/transactions/email-protocol/permission": {
      "post": {
        "summary": "send permission to originator from email protocol VASP",
        "description": "only for email protocol",
        "requestBody": {
          "description": "post /transactions/email-protocol/permission params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PostEmailProtocolPermissionInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "customer": {
                        "address": {
                          "address_line": [
                            "string"
                          ],
                          "address_type": "string",
                          "building_name": "string",
                          "building_number": "string",
                          "country": "string",
                          "country_sub_division": "string",
                          "department": "string",
                          "district_name": "string",
                          "floor": "string",
                          "post_box": "string",
                          "post_code": "string",
                          "room": "string",
                          "street_name": "string",
                          "sub_department": "string",
                          "town_location_name": "string",
                          "town_name": "string"
                        },
                        "assets": [
                          {
                            "address": "string",
                            "currency_id": "string",
                            "extra_info": {},
                            "value": "string"
                          }
                        ],
                        "assets_ignore_kyt": true,
                        "birth": {
                          "date_of_birth": "string",
                          "place_of_birth": "string"
                        },
                        "country": "string",
                        "customer_id": "string",
                        "customer_type": 0,
                        "legal_person_name": {
                          "local_name": "string",
                          "name": "string",
                          "phonetic_name": "string"
                        },
                        "national": {
                          "country_of_issue": "string",
                          "national_identifier": "string",
                          "national_identifier_type": "string",
                          "registration_authority": "string"
                        },
                        "natural_person_name": {
                          "local_name": {
                            "first_name": "string",
                            "last_name": "string"
                          },
                          "name": {
                            "first_name": "string",
                            "last_name": "string"
                          },
                          "phonetic_name": {
                            "first_name": "string",
                            "last_name": "string"
                          }
                        }
                      },
                      "forced_sending_when_VASP_is_not_healthy": true,
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "permission_status": 0,
                      "reject_code": "BVRC001",
                      "reject_message": "string"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/transactions/email-protocol"
        ]
      }
    },
    "/transactions/email-protocol/verify-token/{token}": {
      "get": {
        "summary": "verify if token is valid and get its transaction identifier",
        "description": "only for email protocol",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "description": "JWT token",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    },
                    "schema.Resp": {
                      "$ref": "#/components/schemas/schema.Resp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "tags": [
          "Hub/transactions/email-protocol"
        ]
      }
    },
    "/transactions/permission": {
      "patch": {
        "summary": "send permission to originator",
        "requestBody": {
          "description": "patch /transactions/permission params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "permission_status": {
                      "type": "integer"
                    },
                    "id": {
                      "type": "string"
                    },
                    "reject_code": {
                      "type": "string"
                    },
                    "reject_message": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "permission_status",
                    "id"
                  ]
                }
              },
              "examples": {
                "Accept": {
                  "value": [
                    {
                      "permission_status": 0,
                      "id": "b6d9e3f0-533b-4867-a3ed-17e84b9cd32c"
                    }
                  ]
                },
                "Reject": {
                  "value": [
                    {
                      "forced_sending_when_VASP_is_not_healthy": true,
                      "id": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
                      "permission_status": 1,
                      "reject_code": "BVRC999",
                      "reject_message": "Unknown address"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/transactions"
        ]
      }
    },
    "/transactions/sanction-match": {
      "post": {
        "summary": "let user do sanction screening",
        "requestBody": {
          "description": "post /transactions/sanction-match params",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/schema.PostSanctionMatchInput"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "name": "willy",
                    "customer_type": 0
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/sanctionscreening.GetSanctionScoreOutput"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/transactions/sanction-match"
        ]
      }
    },
    "/transactions/sanction-report/{searchId}": {
      "get": {
        "summary": "get report from sanction screening service",
        "parameters": [
          {
            "name": "searchId",
            "in": "path",
            "description": "an identifier from sanction screening service",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "binary",
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/pdf": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/transactions/sanction-match"
        ]
      }
    },
    "/transactions/status": {
      "patch": {
        "summary": "unblock or cancel transactions",
        "requestBody": {
          "description": "patch /transactions/status params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PatchTransactionsStatus"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/transactions"
        ]
      }
    },
    "/transactions/txid": {
      "patch": {
        "summary": "send transaction identifier on blockchain to beneficiary",
        "requestBody": {
          "description": "patch /transactions/txid params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PatchTxIdInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "txid": "tx111111111",
                      "id": "9bc36928-7328-4b01-9635-a8676dc847ff"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/transactions"
        ]
      }
    },
    "/transactions/wallet-address-filter": {
      "post": {
        "summary": "use /wallet-address-filter from Sygna Bridge and use KYT service by own credential to get address information",
        "requestBody": {
          "description": "post /transactions/wallet-address-filter params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PostWalletAddressFilterInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "addrs": [
                        "3MBWbunF8kLFA5u9E8mk4MYkWKJNedpx55"
                      ],
                      "currency_id": "sygna:0x80000000"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/schema.PostWalletAddressFilterOutput"
                        }
                      }
                    },
                    "schema.Resp": {
                      "$ref": "#/components/schemas/schema.Resp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/transactions"
        ]
      }
    },
    "/transactions/{id}": {
      "get": {
        "summary": "get specific transaction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "transaction identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/schema.GetTransactionOutput"
                    },
                    "schema.Resp": {
                      "$ref": "#/components/schemas/schema.Resp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/transactions"
        ]
      }
    },
    "/users": {
      "get": {
        "summary": "get all users",
        "description": "only admin could use this method",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "filter users by identifier",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "role_id",
            "in": "query",
            "description": "filter users by role identifier(0:admin 1:member)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "integer"
              }
            }
          },
          {
            "name": "account",
            "in": "query",
            "description": "filter users by login account",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "login_type",
            "in": "query",
            "description": "filter users by login type(only supported password and google now)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "password",
                  "google"
                ]
              }
            }
          },
          {
            "name": "is_active",
            "in": "query",
            "description": "filter users by if status is activated",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "boolean"
              }
            }
          },
          {
            "name": "created_at",
            "in": "query",
            "description": "filter data by a range of created data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "updated_at",
            "in": "query",
            "description": "filter data by a range of updated data(ie. '2021-01-01T00:00:00.000Z,2021-01-02T23:59:59.999Z' means an range between 2021-01-01T00:00:00.000Z and 2021-01-02T23:59:59.999Z inclusive)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/model.User"
                      }
                    },
                    "schema.RespWithPaging": {
                      "$ref": "#/components/schemas/schema.RespWithPaging"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/users"
        ]
      },
      "post": {
        "summary": "create users",
        "description": "only admin could use this method",
        "requestBody": {
          "description": "post /users params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PostUsersInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "account": "user@example.com"
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/users"
        ]
      },
      "delete": {
        "summary": "delete users(member)",
        "description": "only admin could use this method\nall accounts would be logout if admin deleted them",
        "requestBody": {
          "description": "patch /users params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.DeleteUsersInput"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/users"
        ]
      },
      "patch": {
        "summary": "activate or deactivate users(member)",
        "description": "only admin could use this method\nall accounts would be logout if admin deactivated them",
        "requestBody": {
          "description": "patch /users params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PatchUsersInput"
                }
              },
              "examples": {
                "Example 1": {
                  "value": [
                    {
                      "id": "781fe1f1-4f1e-446e-b707-f914048b972e",
                      "is_active": false
                    }
                  ]
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithMutation"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/users"
        ]
      }
    },
    "/users/change-password": {
      "patch": {
        "summary": "change login password",
        "description": "admin or member only could change self password\nall accounts would be logout if one of users changed password\nuser must use password to login if he want to change his password",
        "requestBody": {
          "description": "patch /users/change-password params",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/schema.ChangePasswordInput"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithStatusAndMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/users"
        ]
      }
    },
    "/users/link": {
      "post": {
        "summary": "link your account to third party service",
        "description": "admin or member could only link self account",
        "requestBody": {
          "description": "post /users/link params",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/schema.PostUsersLinkInput"
              },
              "examples": {
                "Example 1": {
                  "value": {
                    "account": "string",
                    "credential": "string",
                    "login_type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithStatusAndMessage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/users"
        ]
      }
    },
    "/users/link/{login_type}": {
      "delete": {
        "summary": "unlink your account from third party service",
        "description": "admin or member could only unlink self account\nall accounts which linked with specific third party service would be logout if one of users unlinked",
        "parameters": [
          {
            "name": "login_type",
            "in": "path",
            "description": "login type which you want to unlink",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/schema.RespWithStatusAndMessage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "summary": "get specific or self user data",
        "description": "admin could get specific or self user data\nmember could only get self user data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "specific user identifier or 'self' to get self user data",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/model.User"
                    },
                    "schema.Resp": {
                      "$ref": "#/components/schemas/schema.Resp"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/users"
        ]
      }
    },
    "/users/history": {
      "get": {
        "summary": "get users audit history",
        "description": "get users audit history",
        "parameters": [
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query",
            "name": "action",
            "style": "form"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query",
            "name": "last_user_email",
            "style": "form"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query",
            "name": "ref_user_email",
            "style": "form"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query",
            "name": "orderby",
            "style": "form"
          },
          {
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "in": "query",
            "name": "created_at",
            "style": "form"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/model.User"
                    },
                    "schema.Resp": {
                      "$ref": "#/components/schemas/schema.Resp"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/users"
        ]
      }
    },
    "/vendors/bridge/sync": {
      "get": {
        "summary": "Synchronize Sygna Bridge Transactions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/vendors"
        ]
      }
    },
    "/vendors/shyft/attestations/sync": {
      "get": {
        "summary": "Synchronize Shyft Attestations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/vendors"
        ]
      }
    },
    "/vendors/test": {
      "post": {
        "summary": "test if third-party service is available",
        "description": "only allow admin to use this method. To know all the supported 3rd party vendors, please check the response of GET `/services/supported`",
        "requestBody": {
          "description": "post /vendors/test params",
          "content": {
            "*/*": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/schema.PostVendorsTestInput"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/schema.PostVendorsTestOutput"
                      }
                    },
                    "schema.Resp": {
                      "$ref": "#/components/schemas/schema.Resp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/vendors"
        ]
      }
    },
    "/webhook-log": {
      "get": {
        "summary": "get all webhook logs",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "filter log by webhook event id",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "filter log by webhook event status",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "transaction_uuid",
            "in": "query",
            "description": "filter log by transaction uuid",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "counterparty_vasp_code",
            "in": "query",
            "description": "filter log by counterparty vasp code",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "protocol",
            "in": "query",
            "description": "filter log by transaction protocol",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A URL parameter that specifies the maximum number of records to return. This can be any positive integer between 1 and 1000 inclusive. If not specified, the default is 20.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Specifies an offset that allows you to retrieve the next batch of records.Any positive integer.If not specified, the default is 0.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "orderby",
            "in": "query",
            "description": "Specifies sequences to sort data (ie.orderby=id:desc)",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/model.WebhookEvent"
                      }
                    },
                    "schema.RespWithPaging": {
                      "$ref": "#/components/schemas/schema.RespWithPaging"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/webhook-log"
        ]
      }
    },
    "/webhook-log/sync": {
      "get": {
        "summary": "resend failed webhook event",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "resend specified webhook event",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/webhook-log"
        ]
      }
    },
    "/global-vasp-export": {
      "get": {
        "summary": "generate global-vasp report",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/global-vasp-export"
        ]
      }
    },
    "/global-vasp-export/status": {
      "get": {
        "summary": "get global-vasp report processing status",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/model.Report"
                    },
                    "schema.Resp": {
                      "$ref": "#/components/schemas/schema.Resp"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/global-vasp-export"
        ]
      }
    },
    "/global-vasp-export/download": {
      "get": {
        "summary": "download global-vasp report",
        "responses": {
          "200": {
            "description": "OK",
            "content": {}
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "$ref": "#/components/schemas/errors.SystemError"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerToken": []
          }
        ],
        "tags": [
          "Hub/global-vasp-export"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "decimal.NullDecimal": {
        "type": "object",
        "properties": {
          "decimal": {
            "type": "number"
          },
          "valid": {
            "type": "boolean"
          }
        }
      },
      "errors.SystemError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "extra_data": {
            "type": "object",
            "properties": {}
          },
          "help": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "stack": {
            "type": "object",
            "properties": {}
          },
          "type": {
            "type": "string"
          }
        }
      },
      "model.Addr": {
        "required": [
          "address"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "extra_info": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "model.Address": {
        "type": "object",
        "properties": {
          "address_line": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "address_type": {
            "type": "string"
          },
          "building_name": {
            "type": "string"
          },
          "building_number": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "country_sub_division": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "district_name": {
            "type": "string"
          },
          "floor": {
            "type": "string"
          },
          "post_box": {
            "type": "string"
          },
          "post_code": {
            "type": "string"
          },
          "room": {
            "type": "string"
          },
          "street_name": {
            "type": "string"
          },
          "sub_department": {
            "type": "string"
          },
          "town_location_name": {
            "type": "string"
          },
          "town_name": {
            "type": "string"
          }
        }
      },
      "model.Asset": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "currency_id": {
            "type": "string"
          },
          "currency_name": {
            "type": "string"
          },
          "currency_symbol": {
            "type": "string"
          },
          "extra_info": {
            "$ref": "#/components/schemas/model.StringObject"
          },
          "id": {
            "type": "string"
          },
          "is_kyt_supported": {
            "type": "boolean"
          },
          "is_sygna_supported": {
            "type": "boolean"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_screened": {
            "type": "string"
          },
          "risk_score": {
            "type": "string"
          },
          "risk_score_provider": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/decimal.NullDecimal"
          },
          "value_usd": {
            "$ref": "#/components/schemas/decimal.NullDecimal"
          }
        }
      },
      "model.BeneficiaryPrivateInfo": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/model.NaturalPersonName"
          },
          {
            "$ref": "#/components/schemas/model.LegalPersonName"
          }
        ]
      },
      "model.Birth": {
        "type": "object",
        "properties": {
          "date_of_birth": {
            "type": "string"
          },
          "place_of_birth": {
            "type": "string"
          }
        }
      },
      "model.Currency": {
        "type": "object",
        "properties": {
          "addr_extra_info": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "created_at": {
            "type": "string"
          },
          "currency_id": {
            "type": "string"
          },
          "currency_name": {
            "type": "string"
          },
          "currency_symbol": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "is_kyt_supported": {
            "type": "boolean"
          },
          "kyt_providers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "platform": {
            "$ref": "#/components/schemas/model.Platform"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "model.GlobalVasp": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "extra_info": {
            "$ref": "#/components/schemas/model.Object"
          },
          "id": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "vasp_identifier": {
            "type": "string"
          },
          "vasp_name": {
            "type": "string"
          },
          "vasp_server_status": {
            "type": "string"
          }
        }
      },
      "model.LegalPersonName": {
        "title": "LegalPersonName",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "local_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phonetic_name": {
            "type": "string"
          }
        },
        "description": "required if customer type equals 1"
      },
      "model.Login": {
        "title": "LegalPersonName",
        "type": "object",
        "properties": {
          "account": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "last_login": {
            "type": "string"
          },
          "last_password_change": {
            "type": "string"
          },
          "login_type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "description": ""
      },
      "model.NameObject": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          }
        }
      },
      "model.National": {
        "type": "object",
        "properties": {
          "country_of_issue": {
            "type": "string"
          },
          "national_identifier": {
            "type": "string"
          },
          "national_identifier_type": {
            "type": "string"
          },
          "registration_authority": {
            "type": "string"
          }
        }
      },
      "model.NaturalPersonName": {
        "title": "NaturalPersonName",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "local_name": {
            "$ref": "#/components/schemas/model.NameObject"
          },
          "name": {
            "$ref": "#/components/schemas/model.NameObject"
          },
          "phonetic_name": {
            "$ref": "#/components/schemas/model.NameObject"
          }
        },
        "description": "required if customer type equals 0"
      },
      "model.Object": {
        "type": "object"
      },
      "model.Ownership": {
        "type": "object",
        "properties": {
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/model.OwnershipAsset"
            }
          },
          "created_at": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/model.Object"
          },
          "id": {
            "type": "string"
          },
          "owner_email": {
            "type": "string"
          },
          "owner_info": {
            "type": "object",
            "properties": {}
          },
          "sender_email": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "status_text": {
            "type": "string"
          },
          "transaction_information": {
            "type": "object",
            "properties": {}
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "model.OwnershipAsset": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "currency_id": {
            "type": "string"
          },
          "currency_name": {
            "type": "string"
          },
          "currency_symbol": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "last_screened": {
            "type": "string"
          },
          "reject_code": {
            "type": "string"
          },
          "reject_message": {
            "type": "string"
          },
          "risk_score": {
            "type": "string"
          },
          "risk_score_provider": {
            "type": "string"
          },
          "txid": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "validation_status": {
            "type": "integer"
          },
          "validation_status_text": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "model.Platform": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "symbol": {
            "type": "string"
          },
          "token_address": {
            "type": "string"
          }
        }
      },
      "model.PostEmailProtocolDepositInput": {
        "required": [
          "currency_id",
          "customer_id",
          "originator",
          "value"
        ],
        "type": "object",
        "properties": {
          "beneficiary": {
            "type": "object",
            "properties": {
              "addrs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/model.Addr"
                }
              },
              "assets": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "currency_id": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "originator": {
            "type": "object",
            "properties": {
              "addrs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/model.Addr"
                }
              }
            }
          },
          "value": {
            "type": "string"
          }
        }
      },
      "model.PostTransactionInput": {
        "title": "",
        "required": [
          "beneficiary",
          "currency_id",
          "customer_id",
          "originator",
          "value"
        ],
        "type": "object",
        "properties": {
          "beneficiary": {
            "type": "object",
            "properties": {
              "addrs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/model.Addr"
                }
              },
              "customer_type": {
                "type": "integer",
                "description": "Customer Type\nRequired if \n- protocol equals Sygna_Bridge \n* 0 - NaturalPerson\n* 1 - LegalPerson"
              },
              "private_info": {
                "$ref": "#/components/schemas/model.BeneficiaryPrivateInfo"
              },
              "vasp_code": {
                "type": "string"
              }
            }
          },
          "currency_id": {
            "type": "string",
            "description": "Choose target currency identifier from GET /currencies"
          },
          "customer_id": {
            "type": "string",
            "description": "Choose target identifier from GET /customers"
          },
          "expire_date": {
            "type": "integer"
          },
          "forced_sending_when_VASP_is_not_healthy": {
            "type": "boolean"
          },
          "need_validate_address": {
            "type": "boolean"
          },
          "originator": {
            "type": "object",
            "properties": {
              "addrs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/model.Addr"
                }
              },
              "assets": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "description": "Choose asset identifiers from GET /customers/:id or input addresses belong to above customer identifier"
          },
          "protocol": {
            "type": "string",
            "nullable": true,
            "enum": [
              "Sygna_Bridge",
              "Sygna_EmailProtocol",
              "TRISA",
              "Veriscope on Shyft"
            ]
          },
          "protocol_extra_info": {
            "type": "object",
            "properties": {}
          },
          "txid": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "description": "The value of the currency requested to transfer."
          }
        },
        "description": ""
      },
      "model.Report": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/model.Object"
          },
          "file_path": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "report_status": {
            "type": "integer"
          },
          "report_status_text": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "vasp_code": {
            "type": "string"
          }
        }
      },
      "model.Rollback": {
        "type": "object",
        "properties": {
          "gorm_version": {
            "type": "string"
          },
          "rollback_id": {
            "type": "string"
          },
          "sql_version": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "model.Service": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "credential": {
            "type": "object",
            "properties": {},
            "description": "this field is plain text"
          },
          "end_time": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "provider": {
            "type": "string"
          },
          "settings": {
            "type": "object",
            "properties": {}
          },
          "start_time": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "vasp_code": {
            "type": "string"
          }
        }
      },
      "model.Setting": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "rule": {
            "type": "object",
            "properties": {}
          },
          "type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "vasp_code": {
            "type": "string"
          }
        }
      },
      "model.StringObject": {
        "type": "object",
        "additionalProperties": {
          "type": "string"
        }
      },
      "model.SupportedService": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "credential": {
            "type": "object",
            "properties": {}
          },
          "editable": {
            "type": "boolean"
          },
          "id": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "provider": {
            "type": "string"
          },
          "settings": {
            "type": "object",
            "properties": {}
          },
          "type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        },
        "title": ""
      },
      "model.SupportedSetting": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "rule": {
            "type": "object",
            "properties": {}
          },
          "type": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "model.User": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "logins": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/model.Login"
            }
          },
          "role_id": {
            "type": "integer"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "model.WebhookEvent": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          },
          "event": {
            "type": "string"
          },
          "payload": {
            "type": "object"
          },
          "transaction_uuid": {
            "type": "string"
          },
          "protocol": {
            "type": "string"
          },
          "counter_party_vasp_code": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "retry_count": {
            "type": "string"
          },
          "webhook_logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/model.Webhook_logs"
            }
          }
        }
      },
      "model.Webhook_logs": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          },
          "trigger": {
            "type": "string"
          }
        }
      },
      "sanctionscreening.GetSanctionScoreOutput": {
        "type": "object",
        "properties": {
          "profile_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "score": {
            "type": "integer"
          }
        }
      },
      "schema.Address": {
        "type": "object",
        "properties": {
          "address_line": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "address_type": {
            "type": "string"
          },
          "building_name": {
            "type": "string"
          },
          "building_number": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "country_sub_division": {
            "type": "string"
          },
          "department": {
            "type": "string"
          },
          "district_name": {
            "type": "string"
          },
          "floor": {
            "type": "string"
          },
          "post_box": {
            "type": "string"
          },
          "post_code": {
            "type": "string"
          },
          "room": {
            "type": "string"
          },
          "street_name": {
            "type": "string"
          },
          "sub_department": {
            "type": "string"
          },
          "town_location_name": {
            "type": "string"
          },
          "town_name": {
            "type": "string"
          }
        }
      },
      "schema.Asset": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "currency_id": {
            "type": "string"
          },
          "extra_info": {
            "type": "object",
            "properties": {}
          },
          "id": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_screened": {
            "type": "string"
          },
          "risk_score": {
            "type": "string"
          },
          "risk_score_provider": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "value_usd": {
            "type": "string"
          }
        }
      },
      "schema.ChangePasswordInput": {
        "required": [
          "new_password",
          "old_password"
        ],
        "type": "object",
        "properties": {
          "new_password": {
            "type": "string",
            "description": "new password must be follow below rules:\nat least 6 letters\nat least 1 number\nat least 1 upper case\nat least 1 special character"
          },
          "old_password": {
            "type": "string"
          }
        }
      },
      "schema.DateAndPlaceOfBirth": {
        "type": "object",
        "properties": {
          "date_of_birth": {
            "type": "string"
          },
          "place_of_birth": {
            "type": "string"
          }
        }
      },
      "schema.DeleteUsersInput": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "specific user identifier"
          }
        }
      },
      "schema.GetCustomerOutput": {
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/schema.Address"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schema.Asset"
            }
          },
          "avg_risk_score": {
            "type": "string"
          },
          "birth": {
            "$ref": "#/components/schemas/schema.DateAndPlaceOfBirth"
          },
          "country": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "customer_type": {
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_screened": {
            "type": "string"
          },
          "max_risk_score": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "national": {
            "$ref": "#/components/schemas/schema.NationalIdentification"
          },
          "protocol_extra_info": {
            "type": "object",
            "properties": {}
          },
          "risk_score_provider": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "schema.GetCustomersOutput": {
        "type": "object",
        "properties": {
          "avg_risk_score": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "customer_id": {
            "type": "string",
            "description": "Name              string                  `json:\"name\"`"
          },
          "id": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_screened": {
            "type": "string"
          },
          "legal_person_name": {
            "$ref": "#/components/schemas/model.LegalPersonName"
          },
          "max_risk_score": {
            "type": "string"
          },
          "natural_person_name": {
            "$ref": "#/components/schemas/model.NaturalPersonName"
          },
          "risk_score_provider": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "schema.GetRootOutput": {
        "type": "object",
        "properties": {
          "release": {
            "type": "string"
          },
          "version": {
            "type": "string"
          }
        }
      },
      "schema.GetTransactionOutput": {
        "required": [
          "created_at",
          "currency_id",
          "direction",
          "id",
          "protocol",
          "status",
          "status_text",
          "updated_at",
          "value"
        ],
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string"
          },
          "currency_id": {
            "type": "string"
          },
          "customer": {
            "$ref": "#/components/schemas/schema.GetCustomerOutput"
          },
          "direction": {
            "type": "integer"
          },
          "high_risk": {
            "type": "boolean",
            "description": "if your KYT service is Elliptic, high_risk would be true when maximum risk score of address in this transaction is greater than score which is mantain in /services ;\nif your KYT service is Chainalysis, high_risk would be true when one of addresses is high in result which scanned by Chainalysis\nif sanction_score is greater than 0, high_risk would be true"
          },
          "id": {
            "type": "string"
          },
          "max_risk_score": {
            "type": "string"
          },
          "protocol": {
            "type": "string",
            "description": "The default is Sygna_Bridge"
          },
          "risk_score_provider": {
            "type": "string"
          },
          "sanction_report_link": {
            "type": "string",
            "description": "sanction_report_link would be valuable if sanction screening service is enabled, it provides a report to download"
          },
          "sanction_score": {
            "type": "integer",
            "description": "sanction_score would be valuable if sanction screening service is enabled"
          },
          "status": {
            "type": "integer"
          },
          "status_text": {
            "type": "string"
          },
          "transaction_asset": {
            "$ref": "#/components/schemas/schema.TransactionAsset"
          },
          "transfer_id": {
            "type": "string"
          },
          "tx_id": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "value_usd": {
            "type": "string"
          }
        }
      },
      "schema.GetTransactionsOutput": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "currency_id": {
            "type": "string"
          },
          "currency_name": {
            "type": "string"
          },
          "currency_symbol": {
            "type": "string"
          },
          "customer_id": {
            "type": "string",
            "description": "Name                  string                      `json:\"name,omitempty\"`"
          },
          "direction": {
            "type": "integer",
            "description": "0 for withdrawal, 1 for deposit"
          },
          "expire_date": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_screened": {
            "type": "string"
          },
          "legal_person_name": {
            "$ref": "#/components/schemas/model.LegalPersonName"
          },
          "natural_person_name": {
            "$ref": "#/components/schemas/model.NaturalPersonName"
          },
          "protocol": {
            "type": "string"
          },
          "protocol_extra_info": {
            "$ref": "#/components/schemas/model.Object"
          },
          "risk_score": {
            "type": "string"
          },
          "risk_score_provider": {
            "type": "string"
          },
          "sanction_score": {
            "type": "integer"
          },
          "sanction_score_provider": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "status_text": {
            "type": "string"
          },
          "transfer_id": {
            "type": "string"
          },
          "tx_id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "value_usd": {
            "type": "string",
            "description": "only used in response"
          }
        }
      },
      "schema.LegalPersonName": {
        "type": "object",
        "properties": {
          "local_name": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "phonetic_name": {
            "type": "string"
          }
        },
        "description": "required if customer_type equals 1"
      },
      "schema.NameObject": {
        "type": "object",
        "properties": {
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          }
        }
      },
      "schema.NationalIdentification": {
        "type": "object",
        "properties": {
          "country_of_issue": {
            "type": "string"
          },
          "national_identifier": {
            "type": "string"
          },
          "national_identifier_type": {
            "type": "string"
          },
          "registration_authority": {
            "type": "string"
          }
        }
      },
      "schema.NaturalPersonName": {
        "type": "object",
        "properties": {
          "local_name": {
            "$ref": "#/components/schemas/schema.NameObject"
          },
          "name": {
            "$ref": "#/components/schemas/schema.NameObject"
          },
          "phonetic_name": {
            "$ref": "#/components/schemas/schema.NameObject"
          }
        },
        "description": "required if customer_type equals 0"
      },
      "schema.PagingResult": {
        "required": [
          "has_next",
          "limit",
          "offset",
          "total"
        ],
        "type": "object",
        "properties": {
          "has_next": {
            "type": "boolean"
          },
          "limit": {
            "type": "integer"
          },
          "next_offset": {
            "type": "integer",
            "description": "next_offset is valuable when has_next is true"
          },
          "offset": {
            "type": "integer"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "schema.PatchAssetInput": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "currency_id": {
            "type": "string"
          },
          "extra_info": {
            "type": "object"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "schema.PatchCustomersInput": {
        "title": "",
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/model.Address"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/model.Asset"
            }
          },
          "assets_ignore_kyt": {
            "type": "boolean"
          },
          "birth": {
            "$ref": "#/components/schemas/model.Birth"
          },
          "country": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "customer_type": {
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "is_active": {
            "type": "boolean"
          },
          "legal_person_name": {
            "$ref": "#/components/schemas/schema.LegalPersonName"
          },
          "national": {
            "$ref": "#/components/schemas/model.National"
          },
          "natural_person_name": {
            "$ref": "#/components/schemas/schema.NaturalPersonName"
          },
          "update_status": {
            "type": "boolean"
          }
        }
      },
      "schema.PatchOwnershipAssetValidationAcceptInput": {
        "required": [
          "id",
          "txid"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Target asset identifier which you want to accept",
            "format": "uuid"
          },
          "txid": {
            "type": "string",
            "description": "Transaction identifier on blockchain"
          }
        }
      },
      "schema.PatchOwnershipAssetValidationConfirmInput": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Target asset identifier which you want to accept",
            "format": "uuid"
          }
        }
      },
      "schema.PatchOwnershipAssetValidationRejectInput": {
        "required": [
          "id",
          "reject_code",
          "reject_message"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Target asset identifier which you want to accept",
            "format": "uuid"
          },
          "reject_code": {
            "type": "string",
            "description": "Reply with [BVRC](ref:beneficiary-vasp-rejected-code).",
            "enum": [
              "BVRC001",
              "BVRC002",
              "BVRC003",
              "BVRC004",
              "BVRC005",
              "BVRC006",
              "BVRC007",
              "BVRC999"
            ]
          },
          "reject_message": {
            "type": "string",
            "description": "Reply detail why you reject."
          }
        }
      },
      "schema.PatchOwnershipConfirmInput": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "accept": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schema.PatchOwnershipAssetValidationConfirmInput"
            }
          },
          "id": {
            "type": "string",
            "description": "Target ownership identifier",
            "format": "uuid"
          },
          "reject": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schema.PatchOwnershipAssetValidationRejectInput"
            }
          }
        }
      },
      "schema.PatchOwnershipIdInput": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Target ownership identifier",
            "format": "uuid"
          }
        }
      },
      "schema.PatchOwnershipValidationInput": {
        "type": "object",
        "properties": {
          "accept": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schema.PatchOwnershipAssetValidationAcceptInput"
            }
          },
          "owner_info": {
            "type": "object",
            "properties": {}
          },
          "reject": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schema.PatchOwnershipAssetValidationRejectInput"
            }
          }
        }
      },
      "schema.PatchPermissionInput": {
        "required": [
          "id",
          "permission_status"
        ],
        "type": "object",
        "properties": {
          "forced_sending_when_VASP_is_not_healthy": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "description": "Target transaction identifier which status is Pending On Beneficiary",
            "format": "uuid"
          },
          "permission_status": {
            "type": "integer",
            "description": "Status of the transfer permission, 0 for accept, 1 for reject"
          },
          "reject_code": {
            "type": "string",
            "description": "Only required when the permission_status is REJECTED, reply with [BVRC](ref:beneficiary-vasp-rejected-code).",
            "enum": [
              "BVRC001",
              "BVRC002",
              "BVRC003",
              "BVRC004",
              "BVRC005",
              "BVRC006",
              "BVRC007",
              "BVRC999"
            ]
          },
          "reject_message": {
            "type": "string",
            "description": "Only required when the permission_status is REJECTED and reject_code is 'BVRC999', reply with [BVRC](ref:beneficiary-vasp-rejected-code)."
          }
        }
      },
      "schema.PatchTransactionsStatus": {
        "required": [
          "action",
          "id"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "integer"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "schema.PatchTxIdInput": {
        "required": [
          "id",
          "txid"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Target transaction identifier which status is Pending On Originator",
            "format": "uuid"
          },
          "txid": {
            "type": "string",
            "description": "Transaction identifier on blockchain"
          }
        }
      },
      "schema.PatchUsersInput": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "specific user identifier"
          },
          "is_active": {
            "type": "boolean"
          },
          "role_id": {
            "type": "integer"
          }
        }
      },
      "schema.PostAssetInput": {
        "required": [
          "address",
          "currency_id"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "currency_id": {
            "type": "string"
          },
          "extra_info": {
            "type": "object",
            "properties": {}
          },
          "value": {
            "type": "string"
          }
        }
      },
      "schema.PostCustomersInput": {
        "required": [
          "assets",
          "country",
          "customer_type"
        ],
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/schema.Address"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schema.PostAssetInput"
            }
          },
          "assets_ignore_kyt": {
            "type": "boolean"
          },
          "birth": {
            "$ref": "#/components/schemas/schema.DateAndPlaceOfBirth"
          },
          "country": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "customer_type": {
            "type": "integer",
            "description": "Customer Type\n* 0 - NaturalPerson\n* 1 - LegalPerson"
          },
          "legal_person_name": {
            "$ref": "#/components/schemas/model.LegalPersonName"
          },
          "national": {
            "$ref": "#/components/schemas/schema.NationalIdentification"
          },
          "natural_person_name": {
            "$ref": "#/components/schemas/model.NaturalPersonName"
          }
        }
      },
      "schema.PostEmailProtocolPermissionInput": {
        "required": [
          "id",
          "permission_status"
        ],
        "type": "object",
        "properties": {
          "customer": {
            "$ref": "#/components/schemas/schema.PostCustomersInput"
          },
          "forced_sending_when_VASP_is_not_healthy": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "description": "Target transaction identifier which status is Pending On Beneficiary",
            "format": "uuid"
          },
          "permission_status": {
            "type": "integer",
            "description": "Status of the transfer permission, 0 for accept, 1 for reject"
          },
          "reject_code": {
            "type": "string",
            "description": "Only required when the permission_status is REJECTED, reply with [BVRC](ref:beneficiary-vasp-rejected-code).",
            "enum": [
              "BVRC001",
              "BVRC002",
              "BVRC003",
              "BVRC004",
              "BVRC005",
              "BVRC006",
              "BVRC007",
              "BVRC999"
            ]
          },
          "reject_message": {
            "type": "string",
            "description": "Only required when the permission_status is REJECTED and reject_code is 'BVRC999', reply with [BVRC](ref:beneficiary-vasp-rejected-code)."
          }
        }
      },
      "schema.PostOauthInput": {
        "required": [
          "account",
          "credential"
        ],
        "type": "object",
        "properties": {
          "account": {
            "type": "string"
          },
          "credential": {
            "type": "string"
          },
          "login_type": {
            "type": "string",
            "default": "password",
            "enum": [
              "password",
              "google"
            ]
          }
        }
      },
      "schema.PostOwnershipInput": {
        "required": [
          "owner_email",
          "private_wallet_address",
          "transaction_information"
        ],
        "type": "object",
        "properties": {
          "assets_ignore_kyt": {
            "type": "boolean"
          },
          "owner_email": {
            "type": "string",
            "format": "email"
          },
          "private_wallet_address": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sender_email": {
            "type": "string",
            "format": "email"
          },
          "transaction_information": {
            "$ref": "#/components/schemas/schema.PostOwnershipTransactionInformationInput"
          }
        },
        "description": ""
      },
      "schema.PostOwnershipTransactionInformationInput": {
        "required": [
          "currency_id",
          "value",
          "vasp_beneficiary_wallet_address"
        ],
        "type": "object",
        "properties": {
          "currency_id": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "vasp_beneficiary_wallet_address": {
            "type": "string"
          }
        }
      },
      "schema.PostSanctionMatchInput": {
        "required": [
          "customer_type",
          "name"
        ],
        "type": "object",
        "properties": {
          "customer_type": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "schema.PostServicesInput": {
        "type": "object",
        "properties": {
          "credential": {
            "type": "object",
            "description": "Please be noted that the \"private_key\" related to povider \"Sygna_Bridge\" has to be in HEX form.\nThe command line for your reference. `openssl ec -in test.pem -outform DER | tail -c +8 | head -c 32 | xxd -p -c 32`"
          },
          "provider": {
            "type": "string",
            "enum": [
              "Elliptic",
              "Chainalysis V1",
              "Chainalysis V2",
              "ComplyAdvantage",
              "Merkle Science",
              "TRISA",
              "Sygna_Bridge",
              "Dow Jones",
              "Coinfirm",
              "Coinfirm (Sandbox)",
              "Veriscope on Shyft"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "Blockchain Analytics",
              "Sanction Screening",
              "Travel Rule"
            ]
          }
        },
        "required": [
          "credential",
          "provider",
          "type"
        ]
      },
      "schema.PostSettingInput": {
        "required": [
          "rule",
          "type"
        ],
        "type": "object",
        "properties": {
          "rule": {
            "type": "object",
            "properties": {}
          },
          "type": {
            "type": "string",
            "enum": [
              "personal_info_checking_items",
              "automation_settings",
              "sanction_screening_timing",
              "forced_sending_when_VASP_is_not_healthy",
              "blockchain_analytics_timing"
            ]
          }
        }
      },
      "schema.PostUsersInput": {
        "required": [
          "account"
        ],
        "type": "object",
        "properties": {
          "account": {
            "type": "string",
            "description": "account should be valid email address"
          },
          "email_pw_to_user": {
            "type": "boolean",
            "description": "email_pw_to_user is optional and its default value is true."
          },
          "password": {
            "type": "string",
            "description": "password is optional and it is generated if password is empty.\npassword must be follow below rules:\nat least 6 letters\nat least 1 number\nat least 1 upper case\nat least 1 special character"
          },
          "role_id": {
            "type": "integer",
            "description": "role_id\n* 0 - admin\n* 1 - member\nrole_id is optional and its default value is 1(member).\nnotice: admin could not be created if there is admin in VASP."
          }
        }
      },
      "schema.PostUsersLinkInput": {
        "required": [
          "account",
          "login_type"
        ],
        "type": "object",
        "properties": {
          "account": {
            "type": "string",
            "description": "your account of third party service"
          },
          "credential": {
            "type": "string",
            "description": "your credential of third party service and it would be used to validate if your account is valid"
          },
          "login_type": {
            "type": "string",
            "description": "third party service name\nonly google is supported now"
          }
        }
      },
      "schema.PostVendorsTestInput": {
        "required": [
          "credential",
          "provider",
          "type"
        ],
        "type": "object",
        "properties": {
          "credential": {
            "type": "object",
            "properties": {}
          },
          "provider": {
            "type": "string",
            "enum": [
              "Sygna_Bridge",
              "Elliptic",
              "Chainalysis",
              "ComplyAdvantage",
              "Merkle Science",
              "TRISA",
              "Dow Jones",
              "Coinfirm",
              "Coinfirm (Sandbox)"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "Travel Rule",
              "Blockchain Analytics",
              "Sanction Screening"
            ]
          }
        }
      },
      "schema.PostVendorsTestOutput": {
        "required": [
          "provider",
          "status_code",
          "type"
        ],
        "type": "object",
        "properties": {
          "error_message": {
            "type": "string"
          },
          "fields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "provider": {
            "type": "string"
          },
          "status_code": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "schema.PostWalletAddressFilterInput": {
        "required": [
          "addrs",
          "currency_id"
        ],
        "type": "object",
        "properties": {
          "addrs": {
            "type": "array",
            "description": "addresses which are searching information by Sygna Bridge",
            "items": {
              "type": "string"
            }
          },
          "currency_id": {
            "type": "string",
            "description": "choose target currency identifier from GET /currencies"
          }
        }
      },
      "schema.PostWalletAddressFilterOutput": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "currency_id": {
            "type": "string"
          },
          "error": {
            "$ref": "#/components/schemas/errors.SystemError"
          },
          "extra_data": {
            "$ref": "#/components/schemas/types.H"
          },
          "is_vasp": {
            "type": "boolean",
            "description": "is_vasp indicates whether address belongs VASP"
          },
          "success": {
            "type": "boolean"
          },
          "type": {
            "type": "string",
            "description": "which type address belongs",
            "enum": [
              "SYGNA_VASP",
              "UNKNOWN",
              "FAILED",
              "OTHER_VASP",
              "PRIVATE_WALLET"
            ]
          }
        }
      },
      "schema.PutCustomersInput": {
        "required": [
          "assets",
          "country",
          "customer_type",
          "id"
        ],
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/schema.Address"
          },
          "assets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/schema.PatchAssetInput"
            }
          },
          "assets_ignore_kyt": {
            "type": "boolean"
          },
          "birth": {
            "$ref": "#/components/schemas/schema.DateAndPlaceOfBirth"
          },
          "country": {
            "type": "string"
          },
          "customer_id": {
            "type": "string"
          },
          "customer_type": {
            "type": "integer",
            "description": "Customer Type\n* 0 - NaturalPerson\n* 1 - LegalPerson"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "is_active": {
            "type": "boolean"
          },
          "legal_person_name": {
            "$ref": "#/components/schemas/model.LegalPersonName"
          },
          "national": {
            "$ref": "#/components/schemas/schema.NationalIdentification"
          },
          "natural_person_name": {
            "$ref": "#/components/schemas/model.NaturalPersonName"
          }
        }
      },
      "schema.PutRollbackInout": {
        "required": [
          "version"
        ],
        "type": "object",
        "properties": {
          "version": {
            "type": "string"
          }
        }
      },
      "schema.PutServicesInput": {
        "required": [
          "credential",
          "is_active",
          "provider",
          "type"
        ],
        "type": "object",
        "properties": {
          "credential": {
            "type": "object",
            "properties": {}
          },
          "is_active": {
            "type": "boolean"
          },
          "provider": {
            "type": "string",
            "enum": [
              "Elliptic",
              "Chainalysis V1",
              "Chainalysis V2",
              "ComplyAdvantage",
              "Merkle Science",
              "TRISA",
              "Sygna_Bridge",
              "Dow Jones",
              "Coinfirm",
              "Coinfirm (Sandbox)"
            ]
          },
          "settings": {
            "type": "object",
            "properties": {}
          },
          "type": {
            "type": "string",
            "enum": [
              "Blockchain Analytics",
              "Sanction Screening",
              "Travel Rule"
            ]
          }
        }
      },
      "schema.Resp": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {}
          }
        }
      },
      "schema.RespWithMutation": {
        "title": "",
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "required": [
                "success"
              ],
              "type": "object",
              "properties": {
                "error": {
                  "$ref": "#/components/schemas/errors.SystemError"
                },
                "id": {
                  "type": "string",
                  "format": "uuid"
                },
                "success": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "schema.RespWithPaging": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "properties": {}
          },
          "paging": {
            "$ref": "#/components/schemas/schema.PagingResult"
          }
        }
      },
      "schema.RespWithStatus": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "success"
            ],
            "properties": {
              "success": {
                "type": "boolean"
              },
              "accessToken": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "data"
        ]
      },
      "schema.RespWithStatusAndMessage": {
        "required": [
          "data"
        ],
        "type": "object",
        "properties": {
          "data": {
            "required": [
              "message",
              "success"
            ],
            "type": "object",
            "properties": {
              "message": {
                "type": "string",
                "example": "something"
              },
              "success": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "schema.TransactionAsset": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "extra_info": {
            "type": "object",
            "properties": {}
          },
          "id": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_screened": {
            "type": "string"
          },
          "risk_score": {
            "type": "string"
          },
          "risk_score_provider": {
            "type": "string"
          }
        }
      },
      "types.H": {
        "type": "object"
      },
      "PostTransactionSygnaBridge": {
        "title": "PostTransactionSygnaBridge",
        "type": "object",
        "description": "This schema is for 'Sygna_Bridge' protocol",
        "properties": {
          "beneficiary": {
            "type": "object",
            "required": [
              "addrs",
              "customer_type",
              "private_info",
              "vasp_code"
            ],
            "properties": {
              "addrs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/model.Addr"
                }
              },
              "customer_type": {
                "type": "integer",
                "description": "Customer Type\nRequired if \n- protocol equals Sygna_Bridge \n* 0 - NaturalPerson\n* 1 - LegalPerson"
              },
              "private_info": {
                "$ref": "#/components/schemas/model.BeneficiaryPrivateInfo"
              },
              "vasp_code": {
                "type": "string"
              }
            }
          },
          "currency_id": {
            "type": "string",
            "description": "Choose target currency identifier from GET /currencies"
          },
          "customer_id": {
            "type": "string",
            "description": "Choose target identifier from GET /customers"
          },
          "expire_date": {
            "type": "integer"
          },
          "forced_sending_when_VASP_is_not_healthy": {
            "type": "boolean"
          },
          "need_validate_address": {
            "type": "boolean"
          },
          "originator": {
            "$ref": "#/components/schemas/OriginatorAsset"
          },
          "protocol": {
            "type": "string",
            "enum": [
              "Sygna_Bridge"
            ],
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The value of the currency requested to transfer."
          }
        },
        "required": [
          "beneficiary",
          "currency_id",
          "customer_id",
          "originator",
          "protocol",
          "value"
        ]
      },
      "PostTransactionUnknown": {
        "title": "PostTransactionUnknown",
        "type": "object",
        "description": "This schema is for 'Unknown' protocol",
        "properties": {
          "beneficiary": {
            "type": "object",
            "properties": {
              "addrs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/model.Addr"
                }
              },
              "customer_type": {
                "type": "integer",
                "description": "Customer Type\n* 0 - NaturalPerson\n* 1 - LegalPerson"
              },
              "private_info": {
                "$ref": "#/components/schemas/model.BeneficiaryPrivateInfo"
              },
              "vasp_code": {
                "type": "string"
              }
            }
          },
          "currency_id": {
            "type": "string",
            "description": "Choose target currency identifier from GET /currencies"
          },
          "customer_id": {
            "type": "string",
            "description": "Choose target identifier from GET /customers"
          },
          "expire_date": {
            "type": "integer"
          },
          "forced_sending_when_VASP_is_not_healthy": {
            "type": "boolean"
          },
          "need_validate_address": {
            "type": "boolean"
          },
          "originator": {
            "$ref": "#/components/schemas/OriginatorAsset"
          },
          "protocol_extra_info": {
            "type": "object"
          },
          "txid": {
            "type": "string"
          },
          "value": {
            "type": "string",
            "description": "The value of the currency requested to transfer."
          }
        },
        "required": [
          "beneficiary",
          "currency_id",
          "customer_id",
          "originator",
          "value"
        ]
      },
      "PostTransactionSygnaEmail": {
        "title": "PostTransactionSygnaEmail",
        "type": "object",
        "description": "This schema is for 'Sygna_EmailProtocol' protocol",
        "properties": {
          "beneficiary": {
            "type": "object",
            "required": [
              "addrs"
            ],
            "properties": {
              "addrs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/model.Addr"
                }
              }
            }
          },
          "currency_id": {
            "type": "string",
            "description": "Choose target currency identifier from GET /currencies"
          },
          "customer_id": {
            "type": "string",
            "description": "Choose target identifier from GET /customers"
          },
          "originator": {
            "$ref": "#/components/schemas/OriginatorAsset"
          },
          "protocol": {
            "type": "string",
            "enum": [
              "Sygna_EmailProtocol"
            ],
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "The value of the currency requested to transfer."
          }
        },
        "required": [
          "beneficiary",
          "currency_id",
          "customer_id",
          "originator",
          "protocol",
          "value"
        ]
      },
      "PostTransactionTRISA": {
        "title": "PostTransactionTRISA",
        "type": "object",
        "description": "This schema is for 'TRISA' protocol",
        "properties": {
          "beneficiary": {
            "type": "object",
            "required": [
              "addrs",
              "customer_type",
              "private_info",
              "vasp_code"
            ],
            "properties": {
              "addrs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/model.Addr"
                }
              },
              "customer_type": {
                "description": "Customer Type\n* 0 - NaturalPerson\n* 1 - LegalPerson",
                "type": "integer"
              },
              "private_info": {
                "$ref": "#/components/schemas/model.BeneficiaryPrivateInfo"
              },
              "vasp_code": {
                "type": "string"
              }
            }
          },
          "currency_id": {
            "description": "Choose target currency identifier from GET /currencies",
            "type": "string"
          },
          "customer_id": {
            "description": "Choose target identifier from GET /customers",
            "type": "string"
          },
          "originator": {
            "$ref": "#/components/schemas/OriginatorAsset"
          },
          "protocol": {
            "type": "string",
            "enum": [
              "TRISA"
            ]
          },
          "protocol_extra_info": {
            "type": "object"
          },
          "txid": {
            "type": "string"
          },
          "value": {
            "description": "The value of the currency requested to transfer.",
            "type": "string"
          }
        },
        "required": [
          "beneficiary",
          "currency_id",
          "customer_id",
          "originator",
          "protocol",
          "txid",
          "value"
        ]
      },
      "PostTransactionShyft": {
        "title": "PostTransactionShyft",
        "type": "object",
        "description": "This schema is for 'Veriscope on Shyft' protocol",
        "properties": {
          "beneficiary": {
            "type": "object",
            "required": [
              "addrs"
            ],
            "properties": {
              "addrs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/model.Addr"
                }
              }
            }
          },
          "currency_id": {
            "description": "Choose target currency identifier from GET /currencies",
            "type": "string"
          },
          "customer_id": {
            "description": "Choose target identifier from GET /customers",
            "type": "string"
          },
          "originator": {
            "$ref": "#/components/schemas/OriginatorAsset"
          },
          "protocol": {
            "type": "string",
            "enum": [
              "Veriscope on Shyft"
            ]
          },
          "protocol_extra_info": {
            "type": "object"
          },
          "value": {
            "description": "The value of the currency requested to transfer.",
            "type": "string"
          }
        },
        "required": [
          "beneficiary",
          "currency_id",
          "customer_id",
          "originator",
          "protocol",
          "value"
        ]
      },
      "OriginatorAsset": {
        "anyOf": [
          {
            "properties": {
              "addrs": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/model.Addr"
                }
              }
            },
            "required": [
              "addrs"
            ]
          },
          {
            "properties": {
              "assets": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "assets"
            ]
          }
        ],
        "type": "object",
        "title": ""
      }
    },
    "securitySchemes": {
      "BearerToken": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header"
      }
    }
  }
}
